---
http_interactions:
- request:
    method: post
    uri: https://collector.newrelic.com/agent_listener/invoke_raw_method?license_key=265ff33536964dfa3ff96eaa58fba95cFFFFNRAL&marshal_format=json&method=log_event_data&protocol_version=17&run_id=BVgE2Aq-EcJ9ADvrtB84K3poyWGoAAEBAAAnIQEAAEK7AgQfPOcaAwAGOS4yMS4wAAtzaW1iYS5sb2NhbAAHRFNQeS5yYg
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    headers:
      Content-Encoding:
      - gzip
      Host:
      - collector.newrelic.com
      Nr-Utilizationmetadata:
      - AQICFgALc2ltYmEubG9jYWwXAAtzaW1iYS5sb2NhbA
      Nr-Utilizationextra:
      - AQARAAUAAAAIAABgAA
      Nr-Session:
      - BVgE2Aq-EcJ9ADvrtB84K3poyWGoAAEBAAAnIQEAAEK7AgQfPOcaAwAGOS4yMS4wAAtzaW1iYS5sb2NhbAAHRFNQeS5yYg
      Nr-Agenttags:
      - AX2uHIkGAAlhY2NvdW50SWQABzM5MjY5NjQAEHRydXN0ZWRBY2NvdW50SWQABzM5MjY5NjQAB2FjY291bnQAD0FjY291bnQgMzkyNjk2NA
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - NewRelic-RubyAgent/9.21.0 (ruby 3.3.6 arm64-darwin23) zlib/1.2.12
      Content-Type:
      - application/octet-stream
  response:
    status:
      code: 202
      message: ''
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Type:
      - application/json; charset=UTF-8
      X-Envoy-Upstream-Service-Time:
      - '0'
      Date:
      - Tue, 16 Sep 2025 13:09:15 GMT
      Server:
      - envoy
      Nr-Rate-Limited:
      - allowed
      X-Served-By:
      - cache-mad22036-MAD
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Tue, 16 Sep 2025 13:09:15 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ]\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      }\n    },\n    \"available_tools\": {\n      \"type\":
        \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      }\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\"\n    },\n    \"action\":
        {\n      \"type\": \"string\"\n    },\n    \"action_input\": {\n      \"oneOf\":
        [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Union of multiple types\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"task\\\":\\\"Analyze the microsoft/vscode
        repository: first list recent issues, then get repository info via API, and
        summarize what you find\\\",\\\"repository\\\":\\\"microsoft/vscode\\\"}\",\n  \"history\":
        [],\n  \"available_tools\": [\n    {\n      \"name\": \"github_create_issue\",\n      \"description\":
        \"Create a new GitHub issue\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"title\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter title\"\n          },\n          \"body\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        body\"\n          },\n          \"labels\": {\n            \"type\": \"array\",\n            \"items\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"Parameter labels (optional)\"\n          },\n          \"assignees\": {\n            \"type\":
        \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"Parameter assignees (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"title\",\n          \"body\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_create_pr\",\n      \"description\": \"Create a new GitHub pull request\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"title\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        title\"\n          },\n          \"body\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter body\"\n          },\n          \"base\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter base\"\n          },\n          \"head\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        head\"\n          },\n          \"repo\": {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"title\",\n          \"body\",\n          \"base\",\n          \"head\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_list_issues\",\n      \"description\": \"List GitHub issues with
        optional filters\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"state\": {\n            \"type\": \"string\",\n            \"enum\":
        [\n              \"open\",\n              \"closed\",\n              \"all\"\n            ],\n            \"description\":
        \"Parameter state (optional)\"\n          },\n          \"labels\": {\n            \"type\":
        \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"Parameter labels (optional)\"\n          },\n          \"assignee\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter assignee (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          },\n          \"limit\": {\n            \"type\":
        \"integer\",\n            \"description\": \"Parameter limit (optional)\"\n          }\n        },\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"github_list_prs\",\n      \"description\":
        \"List GitHub pull requests with optional filters\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"state\":
        {\n            \"type\": \"string\",\n            \"enum\": [\n              \"open\",\n              \"closed\",\n              \"merged\",\n              \"all\"\n            ],\n            \"description\":
        \"Parameter state (optional)\"\n          },\n          \"author\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter author (optional)\"\n          },\n          \"base\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter base (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          },\n          \"limit\": {\n            \"type\":
        \"integer\",\n            \"description\": \"Parameter limit (optional)\"\n          }\n        },\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"github_get_issue\",\n      \"description\":
        \"Get details of a specific GitHub issue\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"issue_number\": {\n            \"type\":
        \"integer\",\n            \"description\": \"Parameter issue_number\"\n          },\n          \"repo\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"issue_number\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_get_pr\",\n      \"description\": \"Get details of a specific GitHub
        pull request\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pr_number\": {\n            \"type\": \"integer\",\n            \"description\":
        \"Parameter pr_number\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"pr_number\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_comment_on_issue\",\n      \"description\": \"Add a comment to a
        GitHub issue\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"issue_number\": {\n            \"type\": \"integer\",\n            \"description\":
        \"Parameter issue_number\"\n          },\n          \"comment\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter comment\"\n          },\n          \"repo\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"issue_number\",\n          \"comment\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_review_pr\",\n      \"description\": \"Add a review to a GitHub pull
        request\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pr_number\": {\n            \"type\": \"integer\",\n            \"description\":
        \"Parameter pr_number\"\n          },\n          \"review_type\": {\n            \"type\":
        \"string\",\n            \"enum\": [\n              \"approve\",\n              \"comment\",\n              \"request-changes\"\n            ],\n            \"description\":
        \"Parameter review_type\"\n          },\n          \"comment\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter comment (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"pr_number\",\n          \"review_type\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_api_request\",\n      \"description\": \"Make an arbitrary GitHub
        API request\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"endpoint\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter endpoint\"\n          },\n          \"method\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter method (optional)\"\n          },\n          \"fields\":
        {\n            \"type\": \"object\",\n            \"propertyNames\": {\n              \"type\":
        \"string\"\n            },\n            \"additionalProperties\": {\n              \"type\":
        \"string\"\n            },\n            \"description\": \"Parameter fields
        (optional)\"\n          },\n          \"repo\": {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"endpoint\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`.\n\nIMPORTANT: You must respond with valid
        JSON that matches this structure:\n```json\n{\n  \"thought\": \"example string\",\n  \"action\":
        \"example string\",\n  \"action_input\": \"example value\"\n}\n```\n\nRequired
        fields: thought, action, action_input\n\nEnsure your response:\n1. Is valid
        JSON (properly quoted strings, no trailing commas)\n2. Includes all required
        fields\n3. Uses the correct data types for each field\n4. Is wrapped in ```json```
        markdown code blocks\n"}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '13543'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 16 Sep 2025 13:09:16 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '2197'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '2221'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9996'
      X-Ratelimit-Remaining-Tokens:
      - '196987'
      X-Ratelimit-Reset-Requests:
      - 34.384s
      X-Ratelimit-Reset-Tokens:
      - 903ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 980098dc9e43cbdb-MAD
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CGPik80wEk1329GjZbmgLGQTjfGbJ",
          "object": "chat.completion",
          "created": 1758028154,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I need to first list recent issues in the microsoft/vscode repository to gather initial insights, then I can look up more details using the API.\",\n  \"action\": \"github_list_issues\",\n  \"action_input\": {\n    \"repo\": \"microsoft/vscode\",\n    \"state\": \"open\",\n    \"limit\": 5\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2554,
            "completion_tokens": 86,
            "total_tokens": 2640,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Tue, 16 Sep 2025 13:09:16 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ]\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      }\n    },\n    \"observation\": {\n      \"type\":
        \"string\"\n    }\n  },\n  \"required\": [\n    \"input_context\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\"\n    },\n    \"next_step\": {\n      \"type\": \"string\",\n      \"enum\":
        [\n        \"continue\",\n        \"finish\"\n      ]\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"task\\\":\\\"Analyze the microsoft/vscode
        repository: first list recent issues, then get repository info via API, and
        summarize what you find\\\",\\\"repository\\\":\\\"microsoft/vscode\\\"}\",\n  \"history\":
        [\n    {\n      \"step\": 1,\n      \"thought\": \"I need to first list recent
        issues in the microsoft/vscode repository to gather initial insights, then
        I can look up more details using the API.\",\n      \"action\": \"github_list_issues\",\n      \"action_input\":
        {\n        \"repo\": \"microsoft/vscode\",\n        \"state\": \"open\",\n        \"limit\":
        5\n      },\n      \"observation\": \"Found 5 issue(s):\\n#267039: Error on
        send simple commands in terminal model Claude 3.7 \\\"Sorry, the response
        hit the length limit. Please rephrase your prompt. (OPEN)\\n  Labels: info-needed\\n  URL:
        https://github.com/microsoft/vscode/issues/267039\\n\\n#267038: Request Failed:
        400 Bad request: (OPEN)\\n  Assignees: chrmarti\\n  URL: https://github.com/microsoft/vscode/issues/267038\\n\\n#267036:
        Extension (OPEN)\\n  Assignees: sandy081\\n  URL: https://github.com/microsoft/vscode/issues/267036\\n\\n#267035:
        klipper not connecting (OPEN)\\n  Labels: triage-needed\\n  Assignees: joshspicer\\n  URL:
        https://github.com/microsoft/vscode/issues/267035\\n\\n#267034: agent edit
        cloud sonnet (OPEN)\\n  Labels: info-needed, ai-translated\\n  URL: https://github.com/microsoft/vscode/issues/267034\\n\"\n    }\n  ],\n  \"observation\":
        \"Found 5 issue(s):\\n#267039: Error on send simple commands in terminal model
        Claude 3.7 \\\"Sorry, the response hit the length limit. Please rephrase your
        prompt. (OPEN)\\n  Labels: info-needed\\n  URL: https://github.com/microsoft/vscode/issues/267039\\n\\n#267038:
        Request Failed: 400 Bad request: (OPEN)\\n  Assignees: chrmarti\\n  URL: https://github.com/microsoft/vscode/issues/267038\\n\\n#267036:
        Extension (OPEN)\\n  Assignees: sandy081\\n  URL: https://github.com/microsoft/vscode/issues/267036\\n\\n#267035:
        klipper not connecting (OPEN)\\n  Labels: triage-needed\\n  Assignees: joshspicer\\n  URL:
        https://github.com/microsoft/vscode/issues/267035\\n\\n#267034: agent edit
        cloud sonnet (OPEN)\\n  Labels: info-needed, ai-translated\\n  URL: https://github.com/microsoft/vscode/issues/267034\\n\"\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`.\n\nIMPORTANT: You must respond with valid
        JSON that matches this structure:\n```json\n{\n  \"interpretation\": \"example
        string\",\n  \"next_step\": \"example string\"\n}\n```\n\nRequired fields:
        interpretation, next_step\n\nEnsure your response:\n1. Is valid JSON (properly
        quoted strings, no trailing commas)\n2. Includes all required fields\n3. Uses
        the correct data types for each field\n4. Is wrapped in ```json``` markdown
        code blocks\n"}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '5999'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 16 Sep 2025 13:09:19 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1460'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1472'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9997'
      X-Ratelimit-Remaining-Tokens:
      - '198639'
      X-Ratelimit-Reset-Requests:
      - 22.405s
      X-Ratelimit-Reset-Tokens:
      - 408ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 980098f19e62cbdb-MAD
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CGPin4yE0mAuhagrLytS3CEq0Zk1i",
          "object": "chat.completion",
          "created": 1758028157,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"I have successfully listed 5 recent issues in the microsoft/vscode repository, providing insights on their status and URLs for more information. Next, I will gather more repository details via the API.\",\n  \"next_step\": \"continue\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1340,
            "completion_tokens": 62,
            "total_tokens": 1402,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Tue, 16 Sep 2025 13:09:19 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ]\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      }\n    },\n    \"available_tools\": {\n      \"type\":
        \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      }\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\"\n    },\n    \"action\":
        {\n      \"type\": \"string\"\n    },\n    \"action_input\": {\n      \"oneOf\":
        [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Union of multiple types\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"task\\\":\\\"Analyze the microsoft/vscode
        repository: first list recent issues, then get repository info via API, and
        summarize what you find\\\",\\\"repository\\\":\\\"microsoft/vscode\\\"}\",\n  \"history\":
        [\n    {\n      \"step\": 1,\n      \"thought\": \"I need to first list recent
        issues in the microsoft/vscode repository to gather initial insights, then
        I can look up more details using the API.\",\n      \"action\": \"github_list_issues\",\n      \"action_input\":
        {\n        \"repo\": \"microsoft/vscode\",\n        \"state\": \"open\",\n        \"limit\":
        5\n      },\n      \"observation\": \"Found 5 issue(s):\\n#267039: Error on
        send simple commands in terminal model Claude 3.7 \\\"Sorry, the response
        hit the length limit. Please rephrase your prompt. (OPEN)\\n  Labels: info-needed\\n  URL:
        https://github.com/microsoft/vscode/issues/267039\\n\\n#267038: Request Failed:
        400 Bad request: (OPEN)\\n  Assignees: chrmarti\\n  URL: https://github.com/microsoft/vscode/issues/267038\\n\\n#267036:
        Extension (OPEN)\\n  Assignees: sandy081\\n  URL: https://github.com/microsoft/vscode/issues/267036\\n\\n#267035:
        klipper not connecting (OPEN)\\n  Labels: triage-needed\\n  Assignees: joshspicer\\n  URL:
        https://github.com/microsoft/vscode/issues/267035\\n\\n#267034: agent edit
        cloud sonnet (OPEN)\\n  Labels: info-needed, ai-translated\\n  URL: https://github.com/microsoft/vscode/issues/267034\\n\"\n    }\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"github_create_issue\",\n      \"description\":
        \"Create a new GitHub issue\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"title\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter title\"\n          },\n          \"body\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        body\"\n          },\n          \"labels\": {\n            \"type\": \"array\",\n            \"items\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"Parameter labels (optional)\"\n          },\n          \"assignees\": {\n            \"type\":
        \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"Parameter assignees (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"title\",\n          \"body\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_create_pr\",\n      \"description\": \"Create a new GitHub pull request\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"title\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        title\"\n          },\n          \"body\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter body\"\n          },\n          \"base\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter base\"\n          },\n          \"head\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        head\"\n          },\n          \"repo\": {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"title\",\n          \"body\",\n          \"base\",\n          \"head\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_list_issues\",\n      \"description\": \"List GitHub issues with
        optional filters\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"state\": {\n            \"type\": \"string\",\n            \"enum\":
        [\n              \"open\",\n              \"closed\",\n              \"all\"\n            ],\n            \"description\":
        \"Parameter state (optional)\"\n          },\n          \"labels\": {\n            \"type\":
        \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"Parameter labels (optional)\"\n          },\n          \"assignee\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter assignee (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          },\n          \"limit\": {\n            \"type\":
        \"integer\",\n            \"description\": \"Parameter limit (optional)\"\n          }\n        },\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"github_list_prs\",\n      \"description\":
        \"List GitHub pull requests with optional filters\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"state\":
        {\n            \"type\": \"string\",\n            \"enum\": [\n              \"open\",\n              \"closed\",\n              \"merged\",\n              \"all\"\n            ],\n            \"description\":
        \"Parameter state (optional)\"\n          },\n          \"author\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter author (optional)\"\n          },\n          \"base\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter base (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          },\n          \"limit\": {\n            \"type\":
        \"integer\",\n            \"description\": \"Parameter limit (optional)\"\n          }\n        },\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"github_get_issue\",\n      \"description\":
        \"Get details of a specific GitHub issue\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"issue_number\": {\n            \"type\":
        \"integer\",\n            \"description\": \"Parameter issue_number\"\n          },\n          \"repo\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"issue_number\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_get_pr\",\n      \"description\": \"Get details of a specific GitHub
        pull request\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pr_number\": {\n            \"type\": \"integer\",\n            \"description\":
        \"Parameter pr_number\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"pr_number\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_comment_on_issue\",\n      \"description\": \"Add a comment to a
        GitHub issue\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"issue_number\": {\n            \"type\": \"integer\",\n            \"description\":
        \"Parameter issue_number\"\n          },\n          \"comment\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter comment\"\n          },\n          \"repo\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"issue_number\",\n          \"comment\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_review_pr\",\n      \"description\": \"Add a review to a GitHub pull
        request\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pr_number\": {\n            \"type\": \"integer\",\n            \"description\":
        \"Parameter pr_number\"\n          },\n          \"review_type\": {\n            \"type\":
        \"string\",\n            \"enum\": [\n              \"approve\",\n              \"comment\",\n              \"request-changes\"\n            ],\n            \"description\":
        \"Parameter review_type\"\n          },\n          \"comment\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter comment (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"pr_number\",\n          \"review_type\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_api_request\",\n      \"description\": \"Make an arbitrary GitHub
        API request\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"endpoint\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter endpoint\"\n          },\n          \"method\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter method (optional)\"\n          },\n          \"fields\":
        {\n            \"type\": \"object\",\n            \"propertyNames\": {\n              \"type\":
        \"string\"\n            },\n            \"additionalProperties\": {\n              \"type\":
        \"string\"\n            },\n            \"description\": \"Parameter fields
        (optional)\"\n          },\n          \"repo\": {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"endpoint\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`.\n\nIMPORTANT: You must respond with valid
        JSON that matches this structure:\n```json\n{\n  \"thought\": \"example string\",\n  \"action\":
        \"example string\",\n  \"action_input\": \"example value\"\n}\n```\n\nRequired
        fields: thought, action, action_input\n\nEnsure your response:\n1. Is valid
        JSON (properly quoted strings, no trailing commas)\n2. Includes all required
        fields\n3. Uses the correct data types for each field\n4. Is wrapped in ```json```
        markdown code blocks\n"}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '14757'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 16 Sep 2025 13:09:21 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1960'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1996'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9984'
      X-Ratelimit-Remaining-Tokens:
      - '196698'
      X-Ratelimit-Reset-Requests:
      - 2m16.306s
      X-Ratelimit-Reset-Tokens:
      - 990ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 980098fdeb99cbdb-MAD
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CGPipGM9x8iBgHR2WyHnBF5JS0vfu",
          "object": "chat.completion",
          "created": 1758028159,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I should now fetch details for the recent issues I've listed to understand their context and severity better before moving on to summarizing the repository's information.\",\n  \"action\": \"github_get_issue\",\n  \"action_input\": {\n    \"issue_number\": 267039,\n    \"repo\": \"microsoft/vscode\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2879,
            "completion_tokens": 80,
            "total_tokens": 2959,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Tue, 16 Sep 2025 13:09:21 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ]\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      }\n    },\n    \"observation\": {\n      \"type\":
        \"string\"\n    }\n  },\n  \"required\": [\n    \"input_context\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\"\n    },\n    \"next_step\": {\n      \"type\": \"string\",\n      \"enum\":
        [\n        \"continue\",\n        \"finish\"\n      ]\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"task\\\":\\\"Analyze the microsoft/vscode
        repository: first list recent issues, then get repository info via API, and
        summarize what you find\\\",\\\"repository\\\":\\\"microsoft/vscode\\\"}\",\n  \"history\":
        [\n    {\n      \"step\": 1,\n      \"thought\": \"I need to first list recent
        issues in the microsoft/vscode repository to gather initial insights, then
        I can look up more details using the API.\",\n      \"action\": \"github_list_issues\",\n      \"action_input\":
        {\n        \"repo\": \"microsoft/vscode\",\n        \"state\": \"open\",\n        \"limit\":
        5\n      },\n      \"observation\": \"Found 5 issue(s):\\n#267039: Error on
        send simple commands in terminal model Claude 3.7 \\\"Sorry, the response
        hit the length limit. Please rephrase your prompt. (OPEN)\\n  Labels: info-needed\\n  URL:
        https://github.com/microsoft/vscode/issues/267039\\n\\n#267038: Request Failed:
        400 Bad request: (OPEN)\\n  Assignees: chrmarti\\n  URL: https://github.com/microsoft/vscode/issues/267038\\n\\n#267036:
        Extension (OPEN)\\n  Assignees: sandy081\\n  URL: https://github.com/microsoft/vscode/issues/267036\\n\\n#267035:
        klipper not connecting (OPEN)\\n  Labels: triage-needed\\n  Assignees: joshspicer\\n  URL:
        https://github.com/microsoft/vscode/issues/267035\\n\\n#267034: agent edit
        cloud sonnet (OPEN)\\n  Labels: info-needed, ai-translated\\n  URL: https://github.com/microsoft/vscode/issues/267034\\n\"\n    },\n    {\n      \"step\":
        2,\n      \"thought\": \"I should now fetch details for the recent issues
        I''ve listed to understand their context and severity better before moving
        on to summarizing the repository''s information.\",\n      \"action\": \"github_get_issue\",\n      \"action_input\":
        {\n        \"issue_number\": 267039,\n        \"repo\": \"microsoft/vscode\"\n      },\n      \"observation\":
        \"Issue #267039: Error on send simple commands in terminal model Claude 3.7
        \\\"Sorry, the response hit the length limit. Please rephrase your prompt.\\nState:
        OPEN\\nLabels: info-needed\\nURL: https://github.com/microsoft/vscode/issues/267039\\n\\nBody:\\n\\nType:
        <b>Bug</b>\\n\\nError on send simple commands in terminal model Claude 3.7
        \\\"Sorry, the response hit the length limit. Please rephrase your prompt.\\n\\n\\\"\\n\\nExtension
        version: 0.31.0\\nVS Code version: Code 1.104.0 (f220831ea2d946c0dcb0f3eaa480eb435a2c1260,
        2025-09-10T06:46:18.035Z)\\nOS version: Windows_NT x64 10.0.26100\\nModes:\\n\\n<details>\\n<summary>System
        Info</summary>\\n\\n|Item|Value|\\n|---|---|\\n|CPUs|AMD Ryzen 5 5600G with
        Radeon Graphics          (12 x 3900)|\\n|GPU Status|2d_canvas: enabled<br>direct_rendering_display_compositor:
        disabled_off_ok<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>opengl:
        enabled_on<br>rasterization: enabled<br>raw_draw: disabled_off_ok<br>skia_graphite:
        disabled_off<br>trees_in_viz: disabled_off<br>video_decode: enabled<br>video_encode:
        enabled<br>vulkan: disabled_off<br>webgl: enabled<br>webgl2: enabled<br>webgpu:
        enabled<br>webnn: disabled_off|\\n|Load (avg)|undefined|\\n|Memory (System)|31.79GB
        (19.21GB free)|\\n|Process Argv|--crash-reporter-id 2ab64202-95a9-40f3-868f-8725fb33d6ca|\\n|Screen
        Reader|no|\\n|VM|0%|\\n</details><details>\\n<summary>A/B Experiments</summary>\\n\\n```\\nvsliv368cf:30146710\\nbinariesv615:30325510\\nvscrp:30673768\\nnativeloc1:31344060\\ndwcopilot:31170013\\ndwoutputs:31242946\\ncopilot_t_ci:31333650\\ne5gg6876:31282496\\n996jf627:31283433\\npythonrdcb7:31342333\\nusemplatestapi:31297334\\naj953862:31281341\\nnesew2to5:31336538\\nagentclaude:31350858\\nnes-set-on:31351930\\ntestaa123cf:31335227\\n6abeh943:31336334\\n0927b901:31350571\\novs_t:31383295\\naa_t:31379598\\n0cj2b977:31352657\\nasdad-cf:31365767\\ncloudbuttont:31379625\\ntodos-1:31384886\\ncontrol-prompt:31370222\\n3efgi100_wstrepl:31382709\\ntrigger-command-fix:31379601\\nauto_model_enabled:31385282\\n\\n```\\n\\n</details>\\n\\n<!--
        generated by issue reporter -->\"\n    }\n  ],\n  \"observation\": \"Issue
        #267039: Error on send simple commands in terminal model Claude 3.7 \\\"Sorry,
        the response hit the length limit. Please rephrase your prompt.\\nState: OPEN\\nLabels:
        info-needed\\nURL: https://github.com/microsoft/vscode/issues/267039\\n\\nBody:\\n\\nType:
        <b>Bug</b>\\n\\nError on send simple commands in terminal model Claude 3.7
        \\\"Sorry, the response hit the length limit. Please rephrase your prompt.\\n\\n\\\"\\n\\nExtension
        version: 0.31.0\\nVS Code version: Code 1.104.0 (f220831ea2d946c0dcb0f3eaa480eb435a2c1260,
        2025-09-10T06:46:18.035Z)\\nOS version: Windows_NT x64 10.0.26100\\nModes:\\n\\n<details>\\n<summary>System
        Info</summary>\\n\\n|Item|Value|\\n|---|---|\\n|CPUs|AMD Ryzen 5 5600G with
        Radeon Graphics          (12 x 3900)|\\n|GPU Status|2d_canvas: enabled<br>direct_rendering_display_compositor:
        disabled_off_ok<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>opengl:
        enabled_on<br>rasterization: enabled<br>raw_draw: disabled_off_ok<br>skia_graphite:
        disabled_off<br>trees_in_viz: disabled_off<br>video_decode: enabled<br>video_encode:
        enabled<br>vulkan: disabled_off<br>webgl: enabled<br>webgl2: enabled<br>webgpu:
        enabled<br>webnn: disabled_off|\\n|Load (avg)|undefined|\\n|Memory (System)|31.79GB
        (19.21GB free)|\\n|Process Argv|--crash-reporter-id 2ab64202-95a9-40f3-868f-8725fb33d6ca|\\n|Screen
        Reader|no|\\n|VM|0%|\\n</details><details>\\n<summary>A/B Experiments</summary>\\n\\n```\\nvsliv368cf:30146710\\nbinariesv615:30325510\\nvscrp:30673768\\nnativeloc1:31344060\\ndwcopilot:31170013\\ndwoutputs:31242946\\ncopilot_t_ci:31333650\\ne5gg6876:31282496\\n996jf627:31283433\\npythonrdcb7:31342333\\nusemplatestapi:31297334\\naj953862:31281341\\nnesew2to5:31336538\\nagentclaude:31350858\\nnes-set-on:31351930\\ntestaa123cf:31335227\\n6abeh943:31336334\\n0927b901:31350571\\novs_t:31383295\\naa_t:31379598\\n0cj2b977:31352657\\nasdad-cf:31365767\\ncloudbuttont:31379625\\ntodos-1:31384886\\ncontrol-prompt:31370222\\n3efgi100_wstrepl:31382709\\ntrigger-command-fix:31379601\\nauto_model_enabled:31385282\\n\\n```\\n\\n</details>\\n\\n<!--
        generated by issue reporter -->\"\n}\n```\n\nRespond with the corresponding
        output schema fields wrapped in a ```json ``` block,\nstarting with the heading
        `## Output values`.\n\nIMPORTANT: You must respond with valid JSON that matches
        this structure:\n```json\n{\n  \"interpretation\": \"example string\",\n  \"next_step\":
        \"example string\"\n}\n```\n\nRequired fields: interpretation, next_step\n\nEnsure
        your response:\n1. Is valid JSON (properly quoted strings, no trailing commas)\n2.
        Includes all required fields\n3. Uses the correct data types for each field\n4.
        Is wrapped in ```json``` markdown code blocks\n"}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '9862'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 16 Sep 2025 13:09:24 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1497'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1516'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9987'
      X-Ratelimit-Remaining-Tokens:
      - '197712'
      X-Ratelimit-Reset-Requests:
      - 1m52.16s
      X-Ratelimit-Reset-Tokens:
      - 686ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 980099128a0dcbdb-MAD
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CGPitKBTaRe3xngQL6AZu1wHK7PEB",
          "object": "chat.completion",
          "created": 1758028163,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The recent issues in the microsoft/vscode repository indicate that there are several ongoing problems, including a prominent bug where commands are failing, which is marked as needing more information. Immediate attention to these types of issues may be required in order to maintain user satisfaction.\",\n  \"next_step\": \"continue\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2663,
            "completion_tokens": 75,
            "total_tokens": 2738,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Tue, 16 Sep 2025 13:09:24 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ]\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      }\n    },\n    \"available_tools\": {\n      \"type\":
        \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      }\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\"\n    },\n    \"action\":
        {\n      \"type\": \"string\"\n    },\n    \"action_input\": {\n      \"oneOf\":
        [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Union of multiple types\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"task\\\":\\\"Analyze the microsoft/vscode
        repository: first list recent issues, then get repository info via API, and
        summarize what you find\\\",\\\"repository\\\":\\\"microsoft/vscode\\\"}\",\n  \"history\":
        [\n    {\n      \"step\": 1,\n      \"thought\": \"I need to first list recent
        issues in the microsoft/vscode repository to gather initial insights, then
        I can look up more details using the API.\",\n      \"action\": \"github_list_issues\",\n      \"action_input\":
        {\n        \"repo\": \"microsoft/vscode\",\n        \"state\": \"open\",\n        \"limit\":
        5\n      },\n      \"observation\": \"Found 5 issue(s):\\n#267039: Error on
        send simple commands in terminal model Claude 3.7 \\\"Sorry, the response
        hit the length limit. Please rephrase your prompt. (OPEN)\\n  Labels: info-needed\\n  URL:
        https://github.com/microsoft/vscode/issues/267039\\n\\n#267038: Request Failed:
        400 Bad request: (OPEN)\\n  Assignees: chrmarti\\n  URL: https://github.com/microsoft/vscode/issues/267038\\n\\n#267036:
        Extension (OPEN)\\n  Assignees: sandy081\\n  URL: https://github.com/microsoft/vscode/issues/267036\\n\\n#267035:
        klipper not connecting (OPEN)\\n  Labels: triage-needed\\n  Assignees: joshspicer\\n  URL:
        https://github.com/microsoft/vscode/issues/267035\\n\\n#267034: agent edit
        cloud sonnet (OPEN)\\n  Labels: info-needed, ai-translated\\n  URL: https://github.com/microsoft/vscode/issues/267034\\n\"\n    },\n    {\n      \"step\":
        2,\n      \"thought\": \"I should now fetch details for the recent issues
        I''ve listed to understand their context and severity better before moving
        on to summarizing the repository''s information.\",\n      \"action\": \"github_get_issue\",\n      \"action_input\":
        {\n        \"issue_number\": 267039,\n        \"repo\": \"microsoft/vscode\"\n      },\n      \"observation\":
        \"Issue #267039: Error on send simple commands in terminal model Claude 3.7
        \\\"Sorry, the response hit the length limit. Please rephrase your prompt.\\nState:
        OPEN\\nLabels: info-needed\\nURL: https://github.com/microsoft/vscode/issues/267039\\n\\nBody:\\n\\nType:
        <b>Bug</b>\\n\\nError on send simple commands in terminal model Claude 3.7
        \\\"Sorry, the response hit the length limit. Please rephrase your prompt.\\n\\n\\\"\\n\\nExtension
        version: 0.31.0\\nVS Code version: Code 1.104.0 (f220831ea2d946c0dcb0f3eaa480eb435a2c1260,
        2025-09-10T06:46:18.035Z)\\nOS version: Windows_NT x64 10.0.26100\\nModes:\\n\\n<details>\\n<summary>System
        Info</summary>\\n\\n|Item|Value|\\n|---|---|\\n|CPUs|AMD Ryzen 5 5600G with
        Radeon Graphics          (12 x 3900)|\\n|GPU Status|2d_canvas: enabled<br>direct_rendering_display_compositor:
        disabled_off_ok<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>opengl:
        enabled_on<br>rasterization: enabled<br>raw_draw: disabled_off_ok<br>skia_graphite:
        disabled_off<br>trees_in_viz: disabled_off<br>video_decode: enabled<br>video_encode:
        enabled<br>vulkan: disabled_off<br>webgl: enabled<br>webgl2: enabled<br>webgpu:
        enabled<br>webnn: disabled_off|\\n|Load (avg)|undefined|\\n|Memory (System)|31.79GB
        (19.21GB free)|\\n|Process Argv|--crash-reporter-id 2ab64202-95a9-40f3-868f-8725fb33d6ca|\\n|Screen
        Reader|no|\\n|VM|0%|\\n</details><details>\\n<summary>A/B Experiments</summary>\\n\\n```\\nvsliv368cf:30146710\\nbinariesv615:30325510\\nvscrp:30673768\\nnativeloc1:31344060\\ndwcopilot:31170013\\ndwoutputs:31242946\\ncopilot_t_ci:31333650\\ne5gg6876:31282496\\n996jf627:31283433\\npythonrdcb7:31342333\\nusemplatestapi:31297334\\naj953862:31281341\\nnesew2to5:31336538\\nagentclaude:31350858\\nnes-set-on:31351930\\ntestaa123cf:31335227\\n6abeh943:31336334\\n0927b901:31350571\\novs_t:31383295\\naa_t:31379598\\n0cj2b977:31352657\\nasdad-cf:31365767\\ncloudbuttont:31379625\\ntodos-1:31384886\\ncontrol-prompt:31370222\\n3efgi100_wstrepl:31382709\\ntrigger-command-fix:31379601\\nauto_model_enabled:31385282\\n\\n```\\n\\n</details>\\n\\n<!--
        generated by issue reporter -->\"\n    }\n  ],\n  \"available_tools\": [\n    {\n      \"name\":
        \"github_create_issue\",\n      \"description\": \"Create a new GitHub issue\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"title\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        title\"\n          },\n          \"body\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter body\"\n          },\n          \"labels\": {\n            \"type\":
        \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"Parameter labels (optional)\"\n          },\n          \"assignees\": {\n            \"type\":
        \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"Parameter assignees (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"title\",\n          \"body\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_create_pr\",\n      \"description\": \"Create a new GitHub pull request\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"title\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        title\"\n          },\n          \"body\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter body\"\n          },\n          \"base\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter base\"\n          },\n          \"head\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        head\"\n          },\n          \"repo\": {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"title\",\n          \"body\",\n          \"base\",\n          \"head\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_list_issues\",\n      \"description\": \"List GitHub issues with
        optional filters\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"state\": {\n            \"type\": \"string\",\n            \"enum\":
        [\n              \"open\",\n              \"closed\",\n              \"all\"\n            ],\n            \"description\":
        \"Parameter state (optional)\"\n          },\n          \"labels\": {\n            \"type\":
        \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"Parameter labels (optional)\"\n          },\n          \"assignee\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter assignee (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          },\n          \"limit\": {\n            \"type\":
        \"integer\",\n            \"description\": \"Parameter limit (optional)\"\n          }\n        },\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"github_list_prs\",\n      \"description\":
        \"List GitHub pull requests with optional filters\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"state\":
        {\n            \"type\": \"string\",\n            \"enum\": [\n              \"open\",\n              \"closed\",\n              \"merged\",\n              \"all\"\n            ],\n            \"description\":
        \"Parameter state (optional)\"\n          },\n          \"author\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter author (optional)\"\n          },\n          \"base\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter base (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          },\n          \"limit\": {\n            \"type\":
        \"integer\",\n            \"description\": \"Parameter limit (optional)\"\n          }\n        },\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"github_get_issue\",\n      \"description\":
        \"Get details of a specific GitHub issue\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"issue_number\": {\n            \"type\":
        \"integer\",\n            \"description\": \"Parameter issue_number\"\n          },\n          \"repo\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"issue_number\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_get_pr\",\n      \"description\": \"Get details of a specific GitHub
        pull request\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pr_number\": {\n            \"type\": \"integer\",\n            \"description\":
        \"Parameter pr_number\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"pr_number\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_comment_on_issue\",\n      \"description\": \"Add a comment to a
        GitHub issue\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"issue_number\": {\n            \"type\": \"integer\",\n            \"description\":
        \"Parameter issue_number\"\n          },\n          \"comment\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter comment\"\n          },\n          \"repo\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"issue_number\",\n          \"comment\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_review_pr\",\n      \"description\": \"Add a review to a GitHub pull
        request\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pr_number\": {\n            \"type\": \"integer\",\n            \"description\":
        \"Parameter pr_number\"\n          },\n          \"review_type\": {\n            \"type\":
        \"string\",\n            \"enum\": [\n              \"approve\",\n              \"comment\",\n              \"request-changes\"\n            ],\n            \"description\":
        \"Parameter review_type\"\n          },\n          \"comment\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter comment (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"pr_number\",\n          \"review_type\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_api_request\",\n      \"description\": \"Make an arbitrary GitHub
        API request\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"endpoint\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter endpoint\"\n          },\n          \"method\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter method (optional)\"\n          },\n          \"fields\":
        {\n            \"type\": \"object\",\n            \"propertyNames\": {\n              \"type\":
        \"string\"\n            },\n            \"additionalProperties\": {\n              \"type\":
        \"string\"\n            },\n            \"description\": \"Parameter fields
        (optional)\"\n          },\n          \"repo\": {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"endpoint\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`.\n\nIMPORTANT: You must respond with valid
        JSON that matches this structure:\n```json\n{\n  \"thought\": \"example string\",\n  \"action\":
        \"example string\",\n  \"action_input\": \"example value\"\n}\n```\n\nRequired
        fields: thought, action, action_input\n\nEnsure your response:\n1. Is valid
        JSON (properly quoted strings, no trailing commas)\n2. Includes all required
        fields\n3. Uses the correct data types for each field\n4. Is wrapped in ```json```
        markdown code blocks\n"}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '17297'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 16 Sep 2025 13:09:27 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '2184'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '2233'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9988'
      X-Ratelimit-Remaining-Tokens:
      - '196090'
      X-Ratelimit-Reset-Requests:
      - 1m41.747s
      X-Ratelimit-Reset-Tokens:
      - 1.173s
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9800991d9ca1cbdb-MAD
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CGPiu7hhAdRpRq7a8AWYRGQV9wxrc",
          "object": "chat.completion",
          "created": 1758028164,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"Now that I have detailed information about one of the recent issues, I need to summarize the overall findings from the latest issues and then retrieve the repository information to conclude this analysis.\",\n  \"action\": \"github_api_request\",\n  \"action_input\": {\n    \"endpoint\": \"repos/microsoft/vscode\",\n    \"method\": \"GET\",\n    \"fields\": {},\n    \"repo\": \"microsoft/vscode\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 3699,
            "completion_tokens": 100,
            "total_tokens": 3799,
            "prompt_tokens_details": {
              "cached_tokens": 1024,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Tue, 16 Sep 2025 13:09:27 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ]\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      }\n    },\n    \"observation\": {\n      \"type\":
        \"string\"\n    }\n  },\n  \"required\": [\n    \"input_context\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\"\n    },\n    \"next_step\": {\n      \"type\": \"string\",\n      \"enum\":
        [\n        \"continue\",\n        \"finish\"\n      ]\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"task\\\":\\\"Analyze the microsoft/vscode
        repository: first list recent issues, then get repository info via API, and
        summarize what you find\\\",\\\"repository\\\":\\\"microsoft/vscode\\\"}\",\n  \"history\":
        [\n    {\n      \"step\": 1,\n      \"thought\": \"I need to first list recent
        issues in the microsoft/vscode repository to gather initial insights, then
        I can look up more details using the API.\",\n      \"action\": \"github_list_issues\",\n      \"action_input\":
        {\n        \"repo\": \"microsoft/vscode\",\n        \"state\": \"open\",\n        \"limit\":
        5\n      },\n      \"observation\": \"Found 5 issue(s):\\n#267039: Error on
        send simple commands in terminal model Claude 3.7 \\\"Sorry, the response
        hit the length limit. Please rephrase your prompt. (OPEN)\\n  Labels: info-needed\\n  URL:
        https://github.com/microsoft/vscode/issues/267039\\n\\n#267038: Request Failed:
        400 Bad request: (OPEN)\\n  Assignees: chrmarti\\n  URL: https://github.com/microsoft/vscode/issues/267038\\n\\n#267036:
        Extension (OPEN)\\n  Assignees: sandy081\\n  URL: https://github.com/microsoft/vscode/issues/267036\\n\\n#267035:
        klipper not connecting (OPEN)\\n  Labels: triage-needed\\n  Assignees: joshspicer\\n  URL:
        https://github.com/microsoft/vscode/issues/267035\\n\\n#267034: agent edit
        cloud sonnet (OPEN)\\n  Labels: info-needed, ai-translated\\n  URL: https://github.com/microsoft/vscode/issues/267034\\n\"\n    },\n    {\n      \"step\":
        2,\n      \"thought\": \"I should now fetch details for the recent issues
        I''ve listed to understand their context and severity better before moving
        on to summarizing the repository''s information.\",\n      \"action\": \"github_get_issue\",\n      \"action_input\":
        {\n        \"issue_number\": 267039,\n        \"repo\": \"microsoft/vscode\"\n      },\n      \"observation\":
        \"Issue #267039: Error on send simple commands in terminal model Claude 3.7
        \\\"Sorry, the response hit the length limit. Please rephrase your prompt.\\nState:
        OPEN\\nLabels: info-needed\\nURL: https://github.com/microsoft/vscode/issues/267039\\n\\nBody:\\n\\nType:
        <b>Bug</b>\\n\\nError on send simple commands in terminal model Claude 3.7
        \\\"Sorry, the response hit the length limit. Please rephrase your prompt.\\n\\n\\\"\\n\\nExtension
        version: 0.31.0\\nVS Code version: Code 1.104.0 (f220831ea2d946c0dcb0f3eaa480eb435a2c1260,
        2025-09-10T06:46:18.035Z)\\nOS version: Windows_NT x64 10.0.26100\\nModes:\\n\\n<details>\\n<summary>System
        Info</summary>\\n\\n|Item|Value|\\n|---|---|\\n|CPUs|AMD Ryzen 5 5600G with
        Radeon Graphics          (12 x 3900)|\\n|GPU Status|2d_canvas: enabled<br>direct_rendering_display_compositor:
        disabled_off_ok<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>opengl:
        enabled_on<br>rasterization: enabled<br>raw_draw: disabled_off_ok<br>skia_graphite:
        disabled_off<br>trees_in_viz: disabled_off<br>video_decode: enabled<br>video_encode:
        enabled<br>vulkan: disabled_off<br>webgl: enabled<br>webgl2: enabled<br>webgpu:
        enabled<br>webnn: disabled_off|\\n|Load (avg)|undefined|\\n|Memory (System)|31.79GB
        (19.21GB free)|\\n|Process Argv|--crash-reporter-id 2ab64202-95a9-40f3-868f-8725fb33d6ca|\\n|Screen
        Reader|no|\\n|VM|0%|\\n</details><details>\\n<summary>A/B Experiments</summary>\\n\\n```\\nvsliv368cf:30146710\\nbinariesv615:30325510\\nvscrp:30673768\\nnativeloc1:31344060\\ndwcopilot:31170013\\ndwoutputs:31242946\\ncopilot_t_ci:31333650\\ne5gg6876:31282496\\n996jf627:31283433\\npythonrdcb7:31342333\\nusemplatestapi:31297334\\naj953862:31281341\\nnesew2to5:31336538\\nagentclaude:31350858\\nnes-set-on:31351930\\ntestaa123cf:31335227\\n6abeh943:31336334\\n0927b901:31350571\\novs_t:31383295\\naa_t:31379598\\n0cj2b977:31352657\\nasdad-cf:31365767\\ncloudbuttont:31379625\\ntodos-1:31384886\\ncontrol-prompt:31370222\\n3efgi100_wstrepl:31382709\\ntrigger-command-fix:31379601\\nauto_model_enabled:31385282\\n\\n```\\n\\n</details>\\n\\n<!--
        generated by issue reporter -->\"\n    },\n    {\n      \"step\": 3,\n      \"thought\":
        \"Now that I have detailed information about one of the recent issues, I need
        to summarize the overall findings from the latest issues and then retrieve
        the repository information to conclude this analysis.\",\n      \"action\":
        \"github_api_request\",\n      \"action_input\": {\n        \"endpoint\":
        \"repos/microsoft/vscode\",\n        \"method\": \"GET\",\n        \"fields\":
        {},\n        \"repo\": \"microsoft/vscode\"\n      },\n      \"observation\":
        \"API request failed: unknown flag: --repo\\n\\nUsage:  gh api <endpoint>
        [flags]\\n\\nFlags:\\n      --cache duration        Cache the response, e.g.
        \\\"3600s\\\", \\\"60m\\\", \\\"1h\\\"\\n  -F, --field key=value       Add
        a typed parameter in key=value format\\n  -H, --header key:value      Add
        a HTTP request header in key:value format\\n      --hostname string       The
        GitHub hostname for the request (default \\\"github.com\\\")\\n  -i, --include               Include
        HTTP response status line and headers in the output\\n      --input file            The
        file to use as body for the HTTP request (use \\\"-\\\" to read from standard
        input)\\n  -q, --jq string             Query to select values from the response
        using jq syntax\\n  -X, --method string         The HTTP method for the request
        (default \\\"GET\\\")\\n      --paginate              Make additional HTTP
        requests to fetch all pages of results\\n  -p, --preview names         GitHub
        API preview names to request (without the \\\"-preview\\\" suffix)\\n  -f,
        --raw-field key=value   Add a string parameter in key=value format\\n      --silent                Do
        not print the response body\\n      --slurp                 Use with \\\"--paginate\\\"
        to return an array of all pages of either JSON arrays or objects\\n  -t, --template
        string       Format JSON output using a Go template; see \\\"gh help formatting\\\"\\n      --verbose               Include
        full HTTP request and response in the output\\n  \\n\"\n    }\n  ],\n  \"observation\":
        \"API request failed: unknown flag: --repo\\n\\nUsage:  gh api <endpoint>
        [flags]\\n\\nFlags:\\n      --cache duration        Cache the response, e.g.
        \\\"3600s\\\", \\\"60m\\\", \\\"1h\\\"\\n  -F, --field key=value       Add
        a typed parameter in key=value format\\n  -H, --header key:value      Add
        a HTTP request header in key:value format\\n      --hostname string       The
        GitHub hostname for the request (default \\\"github.com\\\")\\n  -i, --include               Include
        HTTP response status line and headers in the output\\n      --input file            The
        file to use as body for the HTTP request (use \\\"-\\\" to read from standard
        input)\\n  -q, --jq string             Query to select values from the response
        using jq syntax\\n  -X, --method string         The HTTP method for the request
        (default \\\"GET\\\")\\n      --paginate              Make additional HTTP
        requests to fetch all pages of results\\n  -p, --preview names         GitHub
        API preview names to request (without the \\\"-preview\\\" suffix)\\n  -f,
        --raw-field key=value   Add a string parameter in key=value format\\n      --silent                Do
        not print the response body\\n      --slurp                 Use with \\\"--paginate\\\"
        to return an array of all pages of either JSON arrays or objects\\n  -t, --template
        string       Format JSON output using a Go template; see \\\"gh help formatting\\\"\\n      --verbose               Include
        full HTTP request and response in the output\\n  \\n\"\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`.\n\nIMPORTANT: You must respond with valid
        JSON that matches this structure:\n```json\n{\n  \"interpretation\": \"example
        string\",\n  \"next_step\": \"example string\"\n}\n```\n\nRequired fields:
        interpretation, next_step\n\nEnsure your response:\n1. Is valid JSON (properly
        quoted strings, no trailing commas)\n2. Includes all required fields\n3. Uses
        the correct data types for each field\n4. Is wrapped in ```json``` markdown
        code blocks\n"}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '11217'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 16 Sep 2025 13:09:28 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1523'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1547'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9979'
      X-Ratelimit-Remaining-Tokens:
      - '197394'
      X-Ratelimit-Reset-Requests:
      - 3m0.613s
      X-Ratelimit-Reset-Tokens:
      - 781ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9800992cfd8acbdb-MAD
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CGPix42wyRNgQDgqq91in19vaiVI3",
          "object": "chat.completion",
          "created": 1758028167,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The analysis of recent issues in the microsoft/vscode repository shows a range of problems, including errors with command inputs and a variety of labels indicating their status. The attempt to retrieve repository information via the GitHub API failed due to invalid flags, indicating the need for review of API usage.\",\n  \"next_step\": \"finish\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2699,
            "completion_tokens": 81,
            "total_tokens": 2780,
            "prompt_tokens_details": {
              "cached_tokens": 1664,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Tue, 16 Sep 2025 13:09:28 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ]\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      }\n    },\n    \"available_tools\": {\n      \"type\":
        \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      }\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\"\n    },\n    \"action\":
        {\n      \"type\": \"string\"\n    },\n    \"action_input\": {\n      \"oneOf\":
        [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Union of multiple types\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"task\\\":\\\"Analyze the microsoft/vscode
        repository: first list recent issues, then get repository info via API, and
        summarize what you find\\\",\\\"repository\\\":\\\"microsoft/vscode\\\"}\",\n  \"history\":
        [\n    {\n      \"step\": 1,\n      \"thought\": \"I need to first list recent
        issues in the microsoft/vscode repository to gather initial insights, then
        I can look up more details using the API.\",\n      \"action\": \"github_list_issues\",\n      \"action_input\":
        {\n        \"repo\": \"microsoft/vscode\",\n        \"state\": \"open\",\n        \"limit\":
        5\n      },\n      \"observation\": \"Found 5 issue(s):\\n#267039: Error on
        send simple commands in terminal model Claude 3.7 \\\"Sorry, the response
        hit the length limit. Please rephrase your prompt. (OPEN)\\n  Labels: info-needed\\n  URL:
        https://github.com/microsoft/vscode/issues/267039\\n\\n#267038: Request Failed:
        400 Bad request: (OPEN)\\n  Assignees: chrmarti\\n  URL: https://github.com/microsoft/vscode/issues/267038\\n\\n#267036:
        Extension (OPEN)\\n  Assignees: sandy081\\n  URL: https://github.com/microsoft/vscode/issues/267036\\n\\n#267035:
        klipper not connecting (OPEN)\\n  Labels: triage-needed\\n  Assignees: joshspicer\\n  URL:
        https://github.com/microsoft/vscode/issues/267035\\n\\n#267034: agent edit
        cloud sonnet (OPEN)\\n  Labels: info-needed, ai-translated\\n  URL: https://github.com/microsoft/vscode/issues/267034\\n\"\n    },\n    {\n      \"step\":
        2,\n      \"thought\": \"I should now fetch details for the recent issues
        I''ve listed to understand their context and severity better before moving
        on to summarizing the repository''s information.\",\n      \"action\": \"github_get_issue\",\n      \"action_input\":
        {\n        \"issue_number\": 267039,\n        \"repo\": \"microsoft/vscode\"\n      },\n      \"observation\":
        \"Issue #267039: Error on send simple commands in terminal model Claude 3.7
        \\\"Sorry, the response hit the length limit. Please rephrase your prompt.\\nState:
        OPEN\\nLabels: info-needed\\nURL: https://github.com/microsoft/vscode/issues/267039\\n\\nBody:\\n\\nType:
        <b>Bug</b>\\n\\nError on send simple commands in terminal model Claude 3.7
        \\\"Sorry, the response hit the length limit. Please rephrase your prompt.\\n\\n\\\"\\n\\nExtension
        version: 0.31.0\\nVS Code version: Code 1.104.0 (f220831ea2d946c0dcb0f3eaa480eb435a2c1260,
        2025-09-10T06:46:18.035Z)\\nOS version: Windows_NT x64 10.0.26100\\nModes:\\n\\n<details>\\n<summary>System
        Info</summary>\\n\\n|Item|Value|\\n|---|---|\\n|CPUs|AMD Ryzen 5 5600G with
        Radeon Graphics          (12 x 3900)|\\n|GPU Status|2d_canvas: enabled<br>direct_rendering_display_compositor:
        disabled_off_ok<br>gpu_compositing: enabled<br>multiple_raster_threads: enabled_on<br>opengl:
        enabled_on<br>rasterization: enabled<br>raw_draw: disabled_off_ok<br>skia_graphite:
        disabled_off<br>trees_in_viz: disabled_off<br>video_decode: enabled<br>video_encode:
        enabled<br>vulkan: disabled_off<br>webgl: enabled<br>webgl2: enabled<br>webgpu:
        enabled<br>webnn: disabled_off|\\n|Load (avg)|undefined|\\n|Memory (System)|31.79GB
        (19.21GB free)|\\n|Process Argv|--crash-reporter-id 2ab64202-95a9-40f3-868f-8725fb33d6ca|\\n|Screen
        Reader|no|\\n|VM|0%|\\n</details><details>\\n<summary>A/B Experiments</summary>\\n\\n```\\nvsliv368cf:30146710\\nbinariesv615:30325510\\nvscrp:30673768\\nnativeloc1:31344060\\ndwcopilot:31170013\\ndwoutputs:31242946\\ncopilot_t_ci:31333650\\ne5gg6876:31282496\\n996jf627:31283433\\npythonrdcb7:31342333\\nusemplatestapi:31297334\\naj953862:31281341\\nnesew2to5:31336538\\nagentclaude:31350858\\nnes-set-on:31351930\\ntestaa123cf:31335227\\n6abeh943:31336334\\n0927b901:31350571\\novs_t:31383295\\naa_t:31379598\\n0cj2b977:31352657\\nasdad-cf:31365767\\ncloudbuttont:31379625\\ntodos-1:31384886\\ncontrol-prompt:31370222\\n3efgi100_wstrepl:31382709\\ntrigger-command-fix:31379601\\nauto_model_enabled:31385282\\n\\n```\\n\\n</details>\\n\\n<!--
        generated by issue reporter -->\"\n    },\n    {\n      \"step\": 3,\n      \"thought\":
        \"Now that I have detailed information about one of the recent issues, I need
        to summarize the overall findings from the latest issues and then retrieve
        the repository information to conclude this analysis.\",\n      \"action\":
        \"github_api_request\",\n      \"action_input\": {\n        \"endpoint\":
        \"repos/microsoft/vscode\",\n        \"method\": \"GET\",\n        \"fields\":
        {},\n        \"repo\": \"microsoft/vscode\"\n      },\n      \"observation\":
        \"API request failed: unknown flag: --repo\\n\\nUsage:  gh api <endpoint>
        [flags]\\n\\nFlags:\\n      --cache duration        Cache the response, e.g.
        \\\"3600s\\\", \\\"60m\\\", \\\"1h\\\"\\n  -F, --field key=value       Add
        a typed parameter in key=value format\\n  -H, --header key:value      Add
        a HTTP request header in key:value format\\n      --hostname string       The
        GitHub hostname for the request (default \\\"github.com\\\")\\n  -i, --include               Include
        HTTP response status line and headers in the output\\n      --input file            The
        file to use as body for the HTTP request (use \\\"-\\\" to read from standard
        input)\\n  -q, --jq string             Query to select values from the response
        using jq syntax\\n  -X, --method string         The HTTP method for the request
        (default \\\"GET\\\")\\n      --paginate              Make additional HTTP
        requests to fetch all pages of results\\n  -p, --preview names         GitHub
        API preview names to request (without the \\\"-preview\\\" suffix)\\n  -f,
        --raw-field key=value   Add a string parameter in key=value format\\n      --silent                Do
        not print the response body\\n      --slurp                 Use with \\\"--paginate\\\"
        to return an array of all pages of either JSON arrays or objects\\n  -t, --template
        string       Format JSON output using a Go template; see \\\"gh help formatting\\\"\\n      --verbose               Include
        full HTTP request and response in the output\\n  \\n\"\n    }\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"github_create_issue\",\n      \"description\":
        \"Create a new GitHub issue\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"title\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter title\"\n          },\n          \"body\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        body\"\n          },\n          \"labels\": {\n            \"type\": \"array\",\n            \"items\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"Parameter labels (optional)\"\n          },\n          \"assignees\": {\n            \"type\":
        \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"Parameter assignees (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"title\",\n          \"body\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_create_pr\",\n      \"description\": \"Create a new GitHub pull request\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"title\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        title\"\n          },\n          \"body\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter body\"\n          },\n          \"base\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter base\"\n          },\n          \"head\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        head\"\n          },\n          \"repo\": {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"title\",\n          \"body\",\n          \"base\",\n          \"head\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_list_issues\",\n      \"description\": \"List GitHub issues with
        optional filters\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"state\": {\n            \"type\": \"string\",\n            \"enum\":
        [\n              \"open\",\n              \"closed\",\n              \"all\"\n            ],\n            \"description\":
        \"Parameter state (optional)\"\n          },\n          \"labels\": {\n            \"type\":
        \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"Parameter labels (optional)\"\n          },\n          \"assignee\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter assignee (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          },\n          \"limit\": {\n            \"type\":
        \"integer\",\n            \"description\": \"Parameter limit (optional)\"\n          }\n        },\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"github_list_prs\",\n      \"description\":
        \"List GitHub pull requests with optional filters\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"state\":
        {\n            \"type\": \"string\",\n            \"enum\": [\n              \"open\",\n              \"closed\",\n              \"merged\",\n              \"all\"\n            ],\n            \"description\":
        \"Parameter state (optional)\"\n          },\n          \"author\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter author (optional)\"\n          },\n          \"base\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter base (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          },\n          \"limit\": {\n            \"type\":
        \"integer\",\n            \"description\": \"Parameter limit (optional)\"\n          }\n        },\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"github_get_issue\",\n      \"description\":
        \"Get details of a specific GitHub issue\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"issue_number\": {\n            \"type\":
        \"integer\",\n            \"description\": \"Parameter issue_number\"\n          },\n          \"repo\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"issue_number\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_get_pr\",\n      \"description\": \"Get details of a specific GitHub
        pull request\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pr_number\": {\n            \"type\": \"integer\",\n            \"description\":
        \"Parameter pr_number\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"pr_number\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_comment_on_issue\",\n      \"description\": \"Add a comment to a
        GitHub issue\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"issue_number\": {\n            \"type\": \"integer\",\n            \"description\":
        \"Parameter issue_number\"\n          },\n          \"comment\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter comment\"\n          },\n          \"repo\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"issue_number\",\n          \"comment\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_review_pr\",\n      \"description\": \"Add a review to a GitHub pull
        request\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pr_number\": {\n            \"type\": \"integer\",\n            \"description\":
        \"Parameter pr_number\"\n          },\n          \"review_type\": {\n            \"type\":
        \"string\",\n            \"enum\": [\n              \"approve\",\n              \"comment\",\n              \"request-changes\"\n            ],\n            \"description\":
        \"Parameter review_type\"\n          },\n          \"comment\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter comment (optional)\"\n          },\n          \"repo\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"pr_number\",\n          \"review_type\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"github_api_request\",\n      \"description\": \"Make an arbitrary GitHub
        API request\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"endpoint\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter endpoint\"\n          },\n          \"method\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter method (optional)\"\n          },\n          \"fields\":
        {\n            \"type\": \"object\",\n            \"propertyNames\": {\n              \"type\":
        \"string\"\n            },\n            \"additionalProperties\": {\n              \"type\":
        \"string\"\n            },\n            \"description\": \"Parameter fields
        (optional)\"\n          },\n          \"repo\": {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ],\n            \"description\":
        \"Parameter repo (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"endpoint\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`.\n\nIMPORTANT: You must respond with valid
        JSON that matches this structure:\n```json\n{\n  \"thought\": \"example string\",\n  \"action\":
        \"example string\",\n  \"action_input\": \"example value\"\n}\n```\n\nRequired
        fields: thought, action, action_input\n\nEnsure your response:\n1. Is valid
        JSON (properly quoted strings, no trailing commas)\n2. Includes all required
        fields\n3. Uses the correct data types for each field\n4. Is wrapped in ```json```
        markdown code blocks\n"}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '19298'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 16 Sep 2025 13:09:30 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1728'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1763'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9983'
      X-Ratelimit-Remaining-Tokens:
      - '194521'
      X-Ratelimit-Reset-Requests:
      - 2m20.754s
      X-Ratelimit-Reset-Tokens:
      - 1.643s
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 98009937a991cbdb-MAD
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CGPizWHpAewUpqPT76UwqTbzdzcee",
          "object": "chat.completion",
          "created": 1758028169,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"Since the API request for repository information failed due to an unknown flag, I need to correct my request format and try retrieving the repository details again.\",\n  \"action\": \"github_api_request\",\n  \"action_input\": {\n    \"endpoint\": \"repos/microsoft/vscode\",\n    \"method\": \"GET\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 4137,
            "completion_tokens": 79,
            "total_tokens": 4216,
            "prompt_tokens_details": {
              "cached_tokens": 1792,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_560af6e559"
        }
  recorded_at: Tue, 16 Sep 2025 13:09:30 GMT
recorded_with: VCR 6.3.1
