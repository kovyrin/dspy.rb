---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ]\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"_type\": {\n            \"type\": \"string\",\n            \"const\":
        \"AvailableTool\"\n          },\n          \"name\": {\n            \"type\":
        \"string\"\n          },\n          \"description\": {\n            \"type\":
        \"string\"\n          },\n          \"schema\": {\n            \"type\": \"object\",\n            \"propertyNames\":
        {\n              \"type\": \"string\"\n            },\n            \"additionalProperties\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"A mapping where keys are strings and values are strings\"\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"description\",\n          \"schema\"\n        ],\n        \"description\":
        \"DSPy::ReAct::AvailableTool struct\"\n      },\n      \"description\": \"Array
        of available tools with their JSON schemas.\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"github_list_issues\",\n        \"github_list_prs\",\n        \"github_get_issue\",\n        \"github_get_pr\",\n        \"github_api_request\",\n        \"finish\"\n      ],\n      \"description\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final result based on processing the input data.\"\n    }\n  },\n  \"required\":
        [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"task\\\":\\\"List the open pull
        requests for the microsoft/vscode repository\\\",\\\"repository\\\":\\\"microsoft/vscode\\\"}\",\n  \"history\":
        [],\n  \"available_tools\": [\n    {\n      \"name\": \"github_list_issues\",\n      \"description\":
        \"List GitHub issues with optional filters\",\n      \"schema\": {\n        \"name\":
        \"github_list_issues\",\n        \"description\": \"List GitHub issues with
        optional filters\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"state\": {\n              \"type\": \"string\",\n              \"enum\":
        [\n                \"open\",\n                \"closed\",\n                \"all\"\n              ],\n              \"description\":
        \"Parameter state (optional)\"\n            },\n            \"labels\": {\n              \"type\":
        \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\":
        \"Parameter labels (optional)\"\n            },\n            \"assignee\":
        {\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter assignee (optional)\"\n            },\n            \"repo\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter repo (optional)\"\n            },\n            \"limit\": {\n              \"type\":
        \"integer\",\n              \"description\": \"Parameter limit (optional)\"\n            }\n          },\n          \"required\":
        []\n        }\n      }\n    },\n    {\n      \"name\": \"github_list_prs\",\n      \"description\":
        \"List GitHub pull requests with optional filters\",\n      \"schema\": {\n        \"name\":
        \"github_list_prs\",\n        \"description\": \"List GitHub pull requests
        with optional filters\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"state\": {\n              \"type\": \"string\",\n              \"enum\":
        [\n                \"open\",\n                \"closed\",\n                \"merged\",\n                \"all\"\n              ],\n              \"description\":
        \"Parameter state (optional)\"\n            },\n            \"author\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter author (optional)\"\n            },\n            \"base\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter base (optional)\"\n            },\n            \"repo\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter repo (optional)\"\n            },\n            \"limit\": {\n              \"type\":
        \"integer\",\n              \"description\": \"Parameter limit (optional)\"\n            }\n          },\n          \"required\":
        []\n        }\n      }\n    },\n    {\n      \"name\": \"github_get_issue\",\n      \"description\":
        \"Get details of a specific GitHub issue\",\n      \"schema\": {\n        \"name\":
        \"github_get_issue\",\n        \"description\": \"Get details of a specific
        GitHub issue\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"issue_number\": {\n              \"type\": \"integer\",\n              \"description\":
        \"Parameter issue_number\"\n            },\n            \"repo\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter repo (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"issue_number\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"github_get_pr\",\n      \"description\": \"Get details of a specific GitHub
        pull request\",\n      \"schema\": {\n        \"name\": \"github_get_pr\",\n        \"description\":
        \"Get details of a specific GitHub pull request\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pr_number\":
        {\n              \"type\": \"integer\",\n              \"description\": \"Parameter
        pr_number\"\n            },\n            \"repo\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter repo (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"pr_number\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"github_api_request\",\n      \"description\": \"Make an arbitrary GitHub
        API request\",\n      \"schema\": {\n        \"name\": \"github_api_request\",\n        \"description\":
        \"Make an arbitrary GitHub API request\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"endpoint\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter endpoint\"\n            },\n            \"method\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        method (optional)\"\n            },\n            \"fields\": {\n              \"type\":
        \"object\",\n              \"propertyNames\": {\n                \"type\":
        \"string\"\n              },\n              \"additionalProperties\": {\n                \"type\":
        \"string\"\n              },\n              \"description\": \"Parameter fields
        (optional)\"\n            },\n            \"repo\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter repo (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"endpoint\"\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`.\n\nIMPORTANT: You must respond with valid
        JSON that matches this structure:\n```json\n{\n  \"thought\": \"Reasoning
        about what to do next, considering the history and observations.\",\n  \"action\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\",\n  \"action_input\":
        \"example value\"\n}\n```\n\nRequired fields: thought, action, action_input\n\nEnsure
        your response:\n1. Is valid JSON (properly quoted strings, no trailing commas)\n2.
        Includes all required fields\n3. Uses the correct data types for each field\n4.
        Is wrapped in ```json``` markdown code blocks\n"}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '12191'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 19 Sep 2025 09:47:18 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '2711'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '2726'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9999'
      X-Ratelimit-Remaining-Tokens:
      - '197263'
      X-Ratelimit-Reset-Requests:
      - 8.64s
      X-Ratelimit-Reset-Tokens:
      - 821ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9818291c6e2b528f-LAX
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CHRzwgqaBwDzQsqMTZxiktYm72wve",
          "object": "chat.completion",
          "created": 1758275236,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"To fulfill the task of listing the open pull requests for the microsoft/vscode repository, I should use the `github_list_prs` tool with the state set to 'open' and the repository specified as 'microsoft/vscode'.\",\n  \"action\": \"github_list_prs\",\n  \"action_input\": {\n    \"state\": \"open\",\n    \"repo\": \"microsoft/vscode\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 2274,
            "completion_tokens": 98,
            "total_tokens": 2372,
            "prompt_tokens_details": {
              "cached_tokens": 1024,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_51db84afab"
        }
  recorded_at: Fri, 19 Sep 2025 09:47:18 GMT
- request:
    method: post
    uri: https://collector.newrelic.com/agent_listener/invoke_raw_method?license_key=265ff33536964dfa3ff96eaa58fba95cFFFFNRAL&marshal_format=json&method=log_event_data&protocol_version=17&run_id=BXecu7PlelseADvrtB84K3pozSbQAAEBAAAnIQEAAPP0AgQfPOcaAwAGOS4yMS4wAAtzaW1iYS5sb2NhbAAHRFNQeS5yYg
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    headers:
      Content-Encoding:
      - gzip
      Host:
      - collector.newrelic.com
      Nr-Utilizationmetadata:
      - AQICFgALc2ltYmEubG9jYWwXAAtzaW1iYS5sb2NhbA
      Nr-Utilizationextra:
      - AQARAAUAAAAIAABgAA
      Nr-Session:
      - BXecu7PlelseADvrtB84K3pozSbQAAEBAAAnIQEAAPP0AgQfPOcaAwAGOS4yMS4wAAtzaW1iYS5sb2NhbAAHRFNQeS5yYg
      Nr-Agenttags:
      - AX2uHIkGAAlhY2NvdW50SWQABzM5MjY5NjQAEHRydXN0ZWRBY2NvdW50SWQABzM5MjY5NjQAB2FjY291bnQAD0FjY291bnQgMzkyNjk2NA
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - NewRelic-RubyAgent/9.21.0 (ruby 3.3.6 arm64-darwin23) zlib/1.2.12
      Content-Type:
      - application/octet-stream
  response:
    status:
      code: 202
      message: Accepted
    headers:
      Date:
      - Fri, 19 Sep 2025 09:47:22 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Content-Length:
      - '0'
      Connection:
      - keep-alive
      Cf-Ray:
      - 981829359bff7aa4-LAX
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Nr-Rate-Limited:
      - allowed
      X-Envoy-Upstream-Service-Time:
      - '1'
      Vary:
      - accept-encoding
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Fri, 19 Sep 2025 09:47:22 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ]\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"task\\\":\\\"List the open pull
        requests for the microsoft/vscode repository\\\",\\\"repository\\\":\\\"microsoft/vscode\\\"}\",\n  \"history\":
        [\n    {\n      \"step\": 1,\n      \"thought\": \"To fulfill the task of
        listing the open pull requests for the microsoft/vscode repository, I should
        use the `github_list_prs` tool with the state set to ''open'' and the repository
        specified as ''microsoft/vscode''.\",\n      \"action\": \"github_list_prs\",\n      \"action_input\":
        {\n        \"state\": \"open\",\n        \"repo\": \"microsoft/vscode\"\n      },\n      \"observation\":
        \"Found 20 pull request(s):\\n#267447: fix: updates quickInputBox aria role
        to combobox (OPEN)\\n  update-quickinputbox-role-to-combobox → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267447\\n\\n#267439: Fix bad terminal
        sticky scroll after `clear`  (OPEN)\\n  anthonykim1/fixBuggyAfterClear → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267439\\n\\n#267438: fix: gen instruct
        prompt and apply btn style (OPEN)\\n  fix-prompt-with-apply-btn-style → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267438\\n\\n#267415: Add @local extension
        search pattern support (OPEN)\\n  copilot/fix-0878c763-3b47-41f6-ad31-75a85b4f32af
        → milively/issue-pane-2\\n  URL: https://github.com/microsoft/vscode/pull/267415\\n\\n#267414:
        Add @local quick access provider for local history (OPEN)\\n  copilot/fix-5b6321b7-a90f-4bfe-afe4-9c2aa86fc418
        → milively/issue-pane-2\\n  URL: https://github.com/microsoft/vscode/pull/267414\\n\\n#267372:
        Add MCP configuration target selection for CLI and URL handler (OPEN)\\n  copilot/fix-e613f478-3b84-4f40-a33a-0220033a780c
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267372\\n\\n#267323:
        fix: fix notebook overlay layout problem (OPEN)\\n  fix/notebook-overlay-layout
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267323\\n\\n#267311:
        Restore PSReadline key remapping in PowerShell shell integration (OPEN)\\n  mawosoft-patch-2
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267311\\n\\n#267291:
        Fix timeout in German language pack smoke test with improved retry logic (OPEN)\\n  copilot/fix-267290
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267291\\n\\n#267286:
        Fix infite loop when prompts are recommended (OPEN)\\n  digitarald/yelping-barracuda
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267286\\n\\n#267278:
        Update github action for instruction update. (OPEN)\\n  rebornix/arbitrary-bear
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267278\\n\\n#267272:
        thinking part OSWE fixes (OPEN)\\n  justin/luvdisc → main\\n  URL: https://github.com/microsoft/vscode/pull/267272\\n\\n#267267:
        Add tree instruction file (OPEN)\\n  benibenj/present-tarantula → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267267\\n\\n#267230: Add `git branch`
        to default auto-approved terminal commands (OPEN)\\n  copilot/fix-ad628c28-3a8d-4f8f-8b92-6657feb94505
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267230\\n\\n#267167:
        Eli/chat input (OPEN)\\n  eli/chat-input → main\\n  URL: https://github.com/microsoft/vscode/pull/267167\\n\\n#267162:
        Replace chat history header and icon with accessible link in empty state (OPEN)\\n  copilot/fix-20515b77-5d84-4d51-b9e1-e0aa5256e991
        → eli/chat-input\\n  URL: https://github.com/microsoft/vscode/pull/267162\\n\\n#267138:
        test out screenshot for failed smoke test (OPEN)\\n  aamunger/screenshot →
        main\\n  URL: https://github.com/microsoft/vscode/pull/267138\\n\\n#267131:
        Implement double-click to create new chat session in Chat Sessions view (OPEN)\\n  copilot/fix-574cffe7-ca07-467b-940c-4efcc8c27e07
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267131\\n\\n#267114:
        AGENTS.md generation / pickup flow in vscode repo dogfooding exercise (OPEN)\\n  partners-in-crime/dogfooding
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267114\\n\\n#267113:
        Add chat enhance action (OPEN)\\n  lramos15/sparkle-party → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267113\\n\"\n    }\n  ],\n  \"observation\":
        \"Found 20 pull request(s):\\n#267447: fix: updates quickInputBox aria role
        to combobox (OPEN)\\n  update-quickinputbox-role-to-combobox → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267447\\n\\n#267439: Fix bad terminal
        sticky scroll after `clear`  (OPEN)\\n  anthonykim1/fixBuggyAfterClear → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267439\\n\\n#267438: fix: gen instruct
        prompt and apply btn style (OPEN)\\n  fix-prompt-with-apply-btn-style → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267438\\n\\n#267415: Add @local extension
        search pattern support (OPEN)\\n  copilot/fix-0878c763-3b47-41f6-ad31-75a85b4f32af
        → milively/issue-pane-2\\n  URL: https://github.com/microsoft/vscode/pull/267415\\n\\n#267414:
        Add @local quick access provider for local history (OPEN)\\n  copilot/fix-5b6321b7-a90f-4bfe-afe4-9c2aa86fc418
        → milively/issue-pane-2\\n  URL: https://github.com/microsoft/vscode/pull/267414\\n\\n#267372:
        Add MCP configuration target selection for CLI and URL handler (OPEN)\\n  copilot/fix-e613f478-3b84-4f40-a33a-0220033a780c
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267372\\n\\n#267323:
        fix: fix notebook overlay layout problem (OPEN)\\n  fix/notebook-overlay-layout
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267323\\n\\n#267311:
        Restore PSReadline key remapping in PowerShell shell integration (OPEN)\\n  mawosoft-patch-2
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267311\\n\\n#267291:
        Fix timeout in German language pack smoke test with improved retry logic (OPEN)\\n  copilot/fix-267290
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267291\\n\\n#267286:
        Fix infite loop when prompts are recommended (OPEN)\\n  digitarald/yelping-barracuda
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267286\\n\\n#267278:
        Update github action for instruction update. (OPEN)\\n  rebornix/arbitrary-bear
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267278\\n\\n#267272:
        thinking part OSWE fixes (OPEN)\\n  justin/luvdisc → main\\n  URL: https://github.com/microsoft/vscode/pull/267272\\n\\n#267267:
        Add tree instruction file (OPEN)\\n  benibenj/present-tarantula → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267267\\n\\n#267230: Add `git branch`
        to default auto-approved terminal commands (OPEN)\\n  copilot/fix-ad628c28-3a8d-4f8f-8b92-6657feb94505
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267230\\n\\n#267167:
        Eli/chat input (OPEN)\\n  eli/chat-input → main\\n  URL: https://github.com/microsoft/vscode/pull/267167\\n\\n#267162:
        Replace chat history header and icon with accessible link in empty state (OPEN)\\n  copilot/fix-20515b77-5d84-4d51-b9e1-e0aa5256e991
        → eli/chat-input\\n  URL: https://github.com/microsoft/vscode/pull/267162\\n\\n#267138:
        test out screenshot for failed smoke test (OPEN)\\n  aamunger/screenshot →
        main\\n  URL: https://github.com/microsoft/vscode/pull/267138\\n\\n#267131:
        Implement double-click to create new chat session in Chat Sessions view (OPEN)\\n  copilot/fix-574cffe7-ca07-467b-940c-4efcc8c27e07
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267131\\n\\n#267114:
        AGENTS.md generation / pickup flow in vscode repo dogfooding exercise (OPEN)\\n  partners-in-crime/dogfooding
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267114\\n\\n#267113:
        Add chat enhance action (OPEN)\\n  lramos15/sparkle-party → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267113\\n\"\n}\n```\n\nRespond with
        the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`.\n\nIMPORTANT: You must respond with valid
        JSON that matches this structure:\n```json\n{\n  \"interpretation\": \"Interpretation
        of the observation\",\n  \"next_step\": \"What to do next: ''#<DSPy::NextStep::Continue>''
        or ''#<DSPy::NextStep::Finish>''\"\n}\n```\n\nRequired fields: interpretation,
        next_step\n\nEnsure your response:\n1. Is valid JSON (properly quoted strings,
        no trailing commas)\n2. Includes all required fields\n3. Uses the correct
        data types for each field\n4. Is wrapped in ```json``` markdown code blocks\n"}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '11838'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 19 Sep 2025 09:47:23 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '719'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '733'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9998'
      X-Ratelimit-Remaining-Tokens:
      - '197213'
      X-Ratelimit-Reset-Requests:
      - 10.293s
      X-Ratelimit-Reset-Tokens:
      - 836ms
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9818294c7ca0528f-LAX
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CHS034les6n4Jq0ldyCiI2o3NFB8w",
          "object": "chat.completion",
          "created": 1758275243,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The tool successfully retrieved a list of 20 open pull requests from the microsoft/vscode repository. This indicates that the action to list pull requests was executed correctly.\",\n  \"next_step\": \"continue\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 3108,
            "completion_tokens": 56,
            "total_tokens": 3164,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_51db84afab"
        }
  recorded_at: Fri, 19 Sep 2025 09:47:23 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"input_context\": {\n      \"type\":
        \"string\",\n      \"description\": \"Serialized representation of all input
        fields\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"_type\":
        {\n            \"type\": \"string\",\n            \"const\": \"HistoryEntry\"\n          },\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action\":
        {\n            \"type\": [\n              \"string\",\n              \"null\"\n            ]\n          },\n          \"action_input\":
        {\n            \"oneOf\": [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              {\n                \"type\":
        \"null\"\n              }\n            ],\n            \"description\": \"Union
        of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        [\n              \"string\",\n              \"null\"\n            ]\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"_type\": {\n            \"type\": \"string\",\n            \"const\":
        \"AvailableTool\"\n          },\n          \"name\": {\n            \"type\":
        \"string\"\n          },\n          \"description\": {\n            \"type\":
        \"string\"\n          },\n          \"schema\": {\n            \"type\": \"object\",\n            \"propertyNames\":
        {\n              \"type\": \"string\"\n            },\n            \"additionalProperties\":
        {\n              \"type\": \"string\"\n            },\n            \"description\":
        \"A mapping where keys are strings and values are strings\"\n          }\n        },\n        \"required\":
        [\n          \"_type\",\n          \"name\",\n          \"description\",\n          \"schema\"\n        ],\n        \"description\":
        \"DSPy::ReAct::AvailableTool struct\"\n      },\n      \"description\": \"Array
        of available tools with their JSON schemas.\"\n    }\n  },\n  \"required\":
        [\n    \"input_context\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"github_list_issues\",\n        \"github_list_prs\",\n        \"github_get_issue\",\n        \"github_get_pr\",\n        \"github_api_request\",\n        \"finish\"\n      ],\n      \"description\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final result based on processing the input data.\"\n    }\n  },\n  \"required\":
        [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to process the given
        inputs."},{"role":"user","content":"## Input Values\n```json\n{\n  \"input_context\":
        \"{\\\"_type\\\":\\\"AnonymousStruct\\\",\\\"task\\\":\\\"List the open pull
        requests for the microsoft/vscode repository\\\",\\\"repository\\\":\\\"microsoft/vscode\\\"}\",\n  \"history\":
        [\n    {\n      \"step\": 1,\n      \"thought\": \"To fulfill the task of
        listing the open pull requests for the microsoft/vscode repository, I should
        use the `github_list_prs` tool with the state set to ''open'' and the repository
        specified as ''microsoft/vscode''.\",\n      \"action\": \"github_list_prs\",\n      \"action_input\":
        {\n        \"state\": \"open\",\n        \"repo\": \"microsoft/vscode\"\n      },\n      \"observation\":
        \"Found 20 pull request(s):\\n#267447: fix: updates quickInputBox aria role
        to combobox (OPEN)\\n  update-quickinputbox-role-to-combobox → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267447\\n\\n#267439: Fix bad terminal
        sticky scroll after `clear`  (OPEN)\\n  anthonykim1/fixBuggyAfterClear → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267439\\n\\n#267438: fix: gen instruct
        prompt and apply btn style (OPEN)\\n  fix-prompt-with-apply-btn-style → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267438\\n\\n#267415: Add @local extension
        search pattern support (OPEN)\\n  copilot/fix-0878c763-3b47-41f6-ad31-75a85b4f32af
        → milively/issue-pane-2\\n  URL: https://github.com/microsoft/vscode/pull/267415\\n\\n#267414:
        Add @local quick access provider for local history (OPEN)\\n  copilot/fix-5b6321b7-a90f-4bfe-afe4-9c2aa86fc418
        → milively/issue-pane-2\\n  URL: https://github.com/microsoft/vscode/pull/267414\\n\\n#267372:
        Add MCP configuration target selection for CLI and URL handler (OPEN)\\n  copilot/fix-e613f478-3b84-4f40-a33a-0220033a780c
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267372\\n\\n#267323:
        fix: fix notebook overlay layout problem (OPEN)\\n  fix/notebook-overlay-layout
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267323\\n\\n#267311:
        Restore PSReadline key remapping in PowerShell shell integration (OPEN)\\n  mawosoft-patch-2
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267311\\n\\n#267291:
        Fix timeout in German language pack smoke test with improved retry logic (OPEN)\\n  copilot/fix-267290
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267291\\n\\n#267286:
        Fix infite loop when prompts are recommended (OPEN)\\n  digitarald/yelping-barracuda
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267286\\n\\n#267278:
        Update github action for instruction update. (OPEN)\\n  rebornix/arbitrary-bear
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267278\\n\\n#267272:
        thinking part OSWE fixes (OPEN)\\n  justin/luvdisc → main\\n  URL: https://github.com/microsoft/vscode/pull/267272\\n\\n#267267:
        Add tree instruction file (OPEN)\\n  benibenj/present-tarantula → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267267\\n\\n#267230: Add `git branch`
        to default auto-approved terminal commands (OPEN)\\n  copilot/fix-ad628c28-3a8d-4f8f-8b92-6657feb94505
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267230\\n\\n#267167:
        Eli/chat input (OPEN)\\n  eli/chat-input → main\\n  URL: https://github.com/microsoft/vscode/pull/267167\\n\\n#267162:
        Replace chat history header and icon with accessible link in empty state (OPEN)\\n  copilot/fix-20515b77-5d84-4d51-b9e1-e0aa5256e991
        → eli/chat-input\\n  URL: https://github.com/microsoft/vscode/pull/267162\\n\\n#267138:
        test out screenshot for failed smoke test (OPEN)\\n  aamunger/screenshot →
        main\\n  URL: https://github.com/microsoft/vscode/pull/267138\\n\\n#267131:
        Implement double-click to create new chat session in Chat Sessions view (OPEN)\\n  copilot/fix-574cffe7-ca07-467b-940c-4efcc8c27e07
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267131\\n\\n#267114:
        AGENTS.md generation / pickup flow in vscode repo dogfooding exercise (OPEN)\\n  partners-in-crime/dogfooding
        → main\\n  URL: https://github.com/microsoft/vscode/pull/267114\\n\\n#267113:
        Add chat enhance action (OPEN)\\n  lramos15/sparkle-party → main\\n  URL:
        https://github.com/microsoft/vscode/pull/267113\\n\"\n    }\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"github_list_issues\",\n      \"description\":
        \"List GitHub issues with optional filters\",\n      \"schema\": {\n        \"name\":
        \"github_list_issues\",\n        \"description\": \"List GitHub issues with
        optional filters\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"state\": {\n              \"type\": \"string\",\n              \"enum\":
        [\n                \"open\",\n                \"closed\",\n                \"all\"\n              ],\n              \"description\":
        \"Parameter state (optional)\"\n            },\n            \"labels\": {\n              \"type\":
        \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\":
        \"Parameter labels (optional)\"\n            },\n            \"assignee\":
        {\n              \"type\": [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter assignee (optional)\"\n            },\n            \"repo\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter repo (optional)\"\n            },\n            \"limit\": {\n              \"type\":
        \"integer\",\n              \"description\": \"Parameter limit (optional)\"\n            }\n          },\n          \"required\":
        []\n        }\n      }\n    },\n    {\n      \"name\": \"github_list_prs\",\n      \"description\":
        \"List GitHub pull requests with optional filters\",\n      \"schema\": {\n        \"name\":
        \"github_list_prs\",\n        \"description\": \"List GitHub pull requests
        with optional filters\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"state\": {\n              \"type\": \"string\",\n              \"enum\":
        [\n                \"open\",\n                \"closed\",\n                \"merged\",\n                \"all\"\n              ],\n              \"description\":
        \"Parameter state (optional)\"\n            },\n            \"author\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter author (optional)\"\n            },\n            \"base\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter base (optional)\"\n            },\n            \"repo\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter repo (optional)\"\n            },\n            \"limit\": {\n              \"type\":
        \"integer\",\n              \"description\": \"Parameter limit (optional)\"\n            }\n          },\n          \"required\":
        []\n        }\n      }\n    },\n    {\n      \"name\": \"github_get_issue\",\n      \"description\":
        \"Get details of a specific GitHub issue\",\n      \"schema\": {\n        \"name\":
        \"github_get_issue\",\n        \"description\": \"Get details of a specific
        GitHub issue\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\":
        {\n            \"issue_number\": {\n              \"type\": \"integer\",\n              \"description\":
        \"Parameter issue_number\"\n            },\n            \"repo\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter repo (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"issue_number\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"github_get_pr\",\n      \"description\": \"Get details of a specific GitHub
        pull request\",\n      \"schema\": {\n        \"name\": \"github_get_pr\",\n        \"description\":
        \"Get details of a specific GitHub pull request\",\n        \"parameters\":
        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pr_number\":
        {\n              \"type\": \"integer\",\n              \"description\": \"Parameter
        pr_number\"\n            },\n            \"repo\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter repo (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"pr_number\"\n          ]\n        }\n      }\n    },\n    {\n      \"name\":
        \"github_api_request\",\n      \"description\": \"Make an arbitrary GitHub
        API request\",\n      \"schema\": {\n        \"name\": \"github_api_request\",\n        \"description\":
        \"Make an arbitrary GitHub API request\",\n        \"parameters\": {\n          \"type\":
        \"object\",\n          \"properties\": {\n            \"endpoint\": {\n              \"type\":
        \"string\",\n              \"description\": \"Parameter endpoint\"\n            },\n            \"method\":
        {\n              \"type\": \"string\",\n              \"description\": \"Parameter
        method (optional)\"\n            },\n            \"fields\": {\n              \"type\":
        \"object\",\n              \"propertyNames\": {\n                \"type\":
        \"string\"\n              },\n              \"additionalProperties\": {\n                \"type\":
        \"string\"\n              },\n              \"description\": \"Parameter fields
        (optional)\"\n            },\n            \"repo\": {\n              \"type\":
        [\n                \"string\",\n                \"null\"\n              ],\n              \"description\":
        \"Parameter repo (optional)\"\n            }\n          },\n          \"required\":
        [\n            \"endpoint\"\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`.\n\nIMPORTANT: You must respond with valid
        JSON that matches this structure:\n```json\n{\n  \"thought\": \"Reasoning
        about what to do next, considering the history and observations.\",\n  \"action\":
        \"The action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\",\n  \"action_input\":
        \"example value\"\n}\n```\n\nRequired fields: thought, action, action_input\n\nEnsure
        your response:\n1. Is valid JSON (properly quoted strings, no trailing commas)\n2.
        Includes all required fields\n3. Uses the correct data types for each field\n4.
        Is wrapped in ```json``` markdown code blocks\n"}],"temperature":1.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.22.1
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '16146'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 19 Sep 2025 09:47:25 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - "<OPENAI_ORGANIZATION>"
      Openai-Processing-Ms:
      - '1204'
      Openai-Project:
      - proj_n52OL5vlzVaXGnYDaGWmVX5F
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1261'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9997'
      X-Ratelimit-Remaining-Tokens:
      - '196302'
      X-Ratelimit-Reset-Requests:
      - 17.709s
      X-Ratelimit-Reset-Tokens:
      - 1.109s
      X-Request-Id:
      - "<REQUEST_ID>"
      X-Openai-Proxy-Wasm:
      - v0.1
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=<REDACTED>
      - _cfuvid=<REDACTED>
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 981829543861528f-LAX
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CHS045gfg5SNN93tDohJ1GKU8r2El",
          "object": "chat.completion",
          "created": 1758275244,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I have retrieved a list of 20 open pull requests for the microsoft/vscode repository. Next, I need to formulate a summary or present the information meaningfully based on the observations.\",\n  \"action\": \"finish\",\n  \"action_input\": \"There are 20 open pull requests in the microsoft/vscode repository. Notable pull requests include #267447 which updates quickInputBox aria role to combobox, and #267439 which fixes bad terminal sticky scroll after `clear`. For the full list, please refer to the GitHub repository.\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 3442,
            "completion_tokens": 125,
            "total_tokens": 3567,
            "prompt_tokens_details": {
              "cached_tokens": 1024,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_51db84afab"
        }
  recorded_at: Fri, 19 Sep 2025 09:47:25 GMT
recorded_with: VCR 6.3.1
