---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Remember that I am learning Spanish.\",\n  \"history\":
        [],\n  \"available_tools\": [\n    {\n      \"name\": \"memory_store\",\n      \"description\":
        \"Store a key-value pair in memory with optional tags\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          },\n          \"value\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter value\"\n          },\n          \"tags\": {\n            \"type\":
        \"array\",\n            \"description\": \"Parameter tags (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8776'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:08:14 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1099'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1102'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9975'
      X-Ratelimit-Remaining-Tokens:
      - '198040'
      X-Ratelimit-Reset-Requests:
      - 3m31.208s
      X-Ratelimit-Reset-Tokens:
      - 588ms
      X-Request-Id:
      - req_b2b4fcbd79e46aa7268d88297bcaaa8e
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=o6y26tzfkgYp.PlOtzX1SgZwGOEFThSjsNGIRTdnxtk-1751677694-1.0.1.1-4OIwtepWGc5OJQbm61_d0AZ6ARxkgR6lCLr2PQ7qMkyp0gWmGO5f8WQEwfn2MaIMg006dMpfnA6Yylws3aU5B_QmmOtbp86zZp8oCW7.uZw;
        path=/; expires=Sat, 05-Jul-25 01:38:14 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=4l4_m02MDXCWiZHur2G4N_31JZYya_1di9ALBpzkO84-1751677694893-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2f851deddddb6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BplfxiLOyG0pqwxMbqeDfXg1Ejf9P",
          "object": "chat.completion",
          "created": 1751677693,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I need to store the information that the user is learning Spanish in memory so that I can recall it later. I will use the 'memory_store' tool to save this information.\",\n  \"action\": \"memory_store\",\n  \"action_input\": {\n    \"key\": \"language_learning\",\n    \"value\": \"Spanish\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1742,
            "completion_tokens": 82,
            "total_tokens": 1824,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:08:14 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The original question\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations. Each entry is a hash representing a step
        in the reasoning process.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"question\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"question\":
        \"Remember that I am learning Spanish.\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x0000000149315e80>\"\n  ],\n  \"observation\":
        \"Stored memory ''language_learning'' successfully\"\n}\n```\n\nRespond with
        the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '3472'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:08:15 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '807'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '813'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9974'
      X-Ratelimit-Remaining-Tokens:
      - '199235'
      X-Ratelimit-Reset-Requests:
      - 3m38.563s
      X-Ratelimit-Reset-Tokens:
      - 229ms
      X-Request-Id:
      - req_dfe54357659bbf604afd3300aadc350e
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=uL7dHWf5twq1ZoP5rPhsrtzWTpkEA6xyxuvKfIPB5DM-1751677695-1.0.1.1-58qlXghIvaiC9N8.j_uV_guHRZXPAK2vhlDtzf5nL32BSZysKJyL6qofQOyH5FijTOT1xs9GmYzjxgvHMPsfcUmk0SytHT2UEJQt8hUheeY;
        path=/; expires=Sat, 05-Jul-25 01:38:15 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=U9eQzfhi_JKbb5qlJXTZ0w3AXPzSAykqjItW90KPY5E-1751677695899-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2f859dd58ddb6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BplfzMbxP3J8t9RFXc5QQHsS1dqg0",
          "object": "chat.completion",
          "created": 1751677695,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The observation indicates that the memory related to language learning has been successfully stored, which is a positive outcome in the learning process.\",\n  \"next_step\": \"continue\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 711,
            "completion_tokens": 49,
            "total_tokens": 760,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:08:15 GMT
recorded_with: VCR 6.3.1
