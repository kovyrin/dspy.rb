---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Remember that I like coffee in
        the morning.\",\n  \"history\": [],\n  \"available_tools\": [\n    {\n      \"name\":
        \"memory_store\",\n      \"description\": \"Store a key-value pair in memory
        with optional tags\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          },\n          \"value\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter value\"\n          },\n          \"tags\":
        {\n            \"type\": \"array\",\n            \"description\": \"Parameter
        tags (optional)\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8783'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:20 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1351'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1354'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9966'
      X-Ratelimit-Remaining-Tokens:
      - '198038'
      X-Ratelimit-Reset-Requests:
      - 4m45.701s
      X-Ratelimit-Reset-Tokens:
      - 588ms
      X-Request-Id:
      - req_027d4cb1ba88a8cdc16bbde5b7fc1782
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=qITOS4qA92Ku4_eD7jOo5Y0PxsHM0UdllPoewAGv74k-1751678000-1.0.1.1-JrL5wJ5HJa9ihpD0jmWd_pl9oVGuqVvK9iU4rbX5c1VVac3.UwGwZIj3T9yqqkhZqOpXX5JPC6Nooslvqwtyglu8PRHEa1ujZoV1hhS.IJ0;
        path=/; expires=Sat, 05-Jul-25 01:43:20 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=ox5fDUFy2x1NXyNFE1D4m99mh1hkCQoa6Dup1ScXb.A-1751678000811-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ffc83df243a6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bplktqgj7thyNtPtDRPNkwiixpRPe",
          "object": "chat.completion",
          "created": 1751677999,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I need to store the user's preference for coffee in the morning in memory so that it can be retrieved later if needed.\",\n  \"action\": \"memory_store\",\n  \"action_input\": {\n    \"key\": \"coffee_preference\",\n    \"value\": \"like coffee in the morning\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1744,
            "completion_tokens": 75,
            "total_tokens": 1819,
            "prompt_tokens_details": {
              "cached_tokens": 1664,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:20 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The original question\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations. Each entry is a hash representing a step
        in the reasoning process.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"question\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"question\":
        \"Remember that I like coffee in the morning.\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x00000001168d63c0>\"\n  ],\n  \"observation\":
        \"Stored memory ''coffee_preference'' successfully\"\n}\n```\n\nRespond with
        the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '3479'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:21 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '671'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '673'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9966'
      X-Ratelimit-Remaining-Tokens:
      - '199232'
      X-Ratelimit-Reset-Requests:
      - 4m52.771s
      X-Ratelimit-Reset-Tokens:
      - 230ms
      X-Request-Id:
      - req_89837c1c1cc2337e485b265694e9a286
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=IfqbS_anzyhIC7nOMbCgx061hJ8gtwMkKtsTv7aqWq8-1751678001-1.0.1.1-ShDFqAKdagadqjldyZe_KtZN_D6S.o0oiYfe8Fw2IvUHs4XteklYJ6hmUkFy1IP_.daFKyXaT3tyEAtpuunTE39enz.PXGN56HdkTv2_plk;
        path=/; expires=Sat, 05-Jul-25 01:43:21 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=P2Tah2jLkOv5uWU2oC.zcL_kPNYstKJqKbViXVa1IDA-1751678001709-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ffd2184a43a6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bplkvs4IwsdXVZsavwk5PVyDbBXsu",
          "object": "chat.completion",
          "created": 1751678001,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The user's preference for coffee in the morning has been successfully stored in memory.\",\n  \"next_step\": \"finish\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 715,
            "completion_tokens": 39,
            "total_tokens": 754,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:21 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Remember that I like coffee in
        the morning.\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x00000001168d63c0>\"\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"memory_store\",\n      \"description\": \"Store
        a key-value pair in memory with optional tags\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          },\n          \"tags\": {\n            \"type\": \"array\",\n            \"description\":
        \"Parameter tags (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8837'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:23 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1489'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1493'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9965'
      X-Ratelimit-Remaining-Tokens:
      - '198025'
      X-Ratelimit-Reset-Requests:
      - 5m0.14s
      X-Ratelimit-Reset-Tokens:
      - 592ms
      X-Request-Id:
      - req_407665a04f101df744faffe70f170f6b
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=WTsqYdzSXJjTBbRrLKjgSgADc.18KRyjLB3NpuOZGwE-1751678003-1.0.1.1-VyDWkv5mo7Fnu8DVAJRUfKv.E9nAaqyOhny3YbLu02JmyhavKTDWovqzTUOBbaOe2R.g2akRJdlCAeEMNpGrQuepQz8sXfJFZpf_ZQFLifQ;
        path=/; expires=Sat, 05-Jul-25 01:43:23 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=5TShK_0VtrvQDbOfvEy3waYtryxxa9U0bdyVh43H.1g-1751678003791-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ffd9efb343a6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BplkwrpBBfk1Nlj7btsfD5M9V7VbS",
          "object": "chat.completion",
          "created": 1751678002,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I need to store the user's preference for coffee in the morning in memory so that it can be recalled later. This will help in personalizing future interactions.\",\n  \"action\": \"memory_store\",\n  \"action_input\": {\n    \"key\": \"coffee_preference\",\n    \"value\": \"like coffee in the morning\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1766,
            "completion_tokens": 82,
            "total_tokens": 1848,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:23 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Also remember that I exercise
        on weekends.\",\n  \"history\": [],\n  \"available_tools\": [\n    {\n      \"name\":
        \"memory_store\",\n      \"description\": \"Store a key-value pair in memory
        with optional tags\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          },\n          \"value\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter value\"\n          },\n          \"tags\":
        {\n            \"type\": \"array\",\n            \"description\": \"Parameter
        tags (optional)\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8782'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:25 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1129'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1132'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9964'
      X-Ratelimit-Remaining-Tokens:
      - '198038'
      X-Ratelimit-Reset-Requests:
      - 5m6.901s
      X-Ratelimit-Reset-Tokens:
      - 588ms
      X-Request-Id:
      - req_c5352b55180678b97bf1f3801676dedf
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=KGWmHCIwZ31x.fNaD4BqK4mVWY6T_7pZiWRA21xFFuA-1751678005-1.0.1.1-Bs7CX_sIxuuqJimZvzZDXbtFFzTpv4uGQzKHgjU5qf8EglGVrlYE25uCzlNGhQJY03eD7DJx7NTRtFfuLjH2VCFne839AGCit49skTghcV8;
        path=/; expires=Sat, 05-Jul-25 01:43:25 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=rT0dd8wCu8aIoi81xH.W.QogyVcz09F10E32_2369uY-1751678005324-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ffe47a4b43a6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BplkyuWWV09GjtkMc74OsZ3j0FH9S",
          "object": "chat.completion",
          "created": 1751678004,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I need to store the information about exercising on weekends in memory so that it can be retrieved later if needed. This will help in keeping track of important personal habits.\",\n  \"action\": \"memory_store\",\n  \"action_input\": {\n    \"key\": \"exercise_schedule\",\n    \"value\": \"I exercise on weekends\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1743,
            "completion_tokens": 82,
            "total_tokens": 1825,
            "prompt_tokens_details": {
              "cached_tokens": 1664,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:25 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The original question\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations. Each entry is a hash representing a step
        in the reasoning process.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"question\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"question\":
        \"Also remember that I exercise on weekends.\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x000000011285d2f8>\"\n  ],\n  \"observation\":
        \"Stored memory ''exercise_schedule'' successfully\"\n}\n```\n\nRespond with
        the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '3478'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:26 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '855'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '857'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9964'
      X-Ratelimit-Remaining-Tokens:
      - '199232'
      X-Ratelimit-Reset-Requests:
      - 5m5.567s
      X-Ratelimit-Reset-Tokens:
      - 230ms
      X-Request-Id:
      - req_e7a30a10751b4493152c4eb1d427c8c8
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=Nw7mxuMt6L9I5CUDhM0dv4a0D4ncYO7JHNJ0XTvcRa8-1751678006-1.0.1.1-M9Q5qet0hgVs_ocKDRG2d_dhYG72AvzITUi9RxTarZ4FQnFCALk4tsJFZMB3BAxeFq207BpcimljEGxviCLthYWrpcxoFjZXdnPFDK1SVHk;
        path=/; expires=Sat, 05-Jul-25 01:43:26 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=3mbuytc0T0RMaop7eEb7NC68vmuQ0Y0fUzXjBDj3iGE-1751678006374-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ffee1b7543a6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bplkz1exByytRLx8oq6IxY5cMOzan",
          "object": "chat.completion",
          "created": 1751678005,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The observation indicates that the exercise schedule has been successfully stored in memory, confirming that the system is now aware of the user's weekend exercise routine.\",\n  \"next_step\": \"finish\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 713,
            "completion_tokens": 52,
            "total_tokens": 765,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:26 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Also remember that I exercise
        on weekends.\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x000000011285d2f8>\"\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"memory_store\",\n      \"description\": \"Store
        a key-value pair in memory with optional tags\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          },\n          \"tags\": {\n            \"type\": \"array\",\n            \"description\":
        \"Parameter tags (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8836'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:27 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1069'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1073'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9962'
      X-Ratelimit-Remaining-Tokens:
      - '198026'
      X-Ratelimit-Reset-Requests:
      - 5m22.874s
      X-Ratelimit-Reset-Tokens:
      - 592ms
      X-Request-Id:
      - req_8a6ff5f4f852cf1d46ce0341eb094ee3
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=6GvxzmxmdY6OyUXt5terESSdMeGKw2gQEhREDHCumo8-1751678007-1.0.1.1-XnZvgCnaHRHTwwm_Rb3OPZ.xq1XVOfcxQ05zQpad9E8gq0_XHDfLQmFayMfhUyFfbdALP6QkPAFdRUSw9JspV4Zv895ZpJ8KU_NgZnEVj0s;
        path=/; expires=Sat, 05-Jul-25 01:43:27 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=NH6phQSfv4eHPD8.UDHLUnqo0bfc7AY8GP6cnTmiG1M-1751678007613-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2fff4997d43a6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bpll04B4G74mxIkaInKjpGOc6Oh4W",
          "object": "chat.completion",
          "created": 1751678006,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I need to store the information about exercising on weekends in memory so that it can be retrieved later. This will help in recalling this detail when needed.\",\n  \"action\": \"memory_store\",\n  \"action_input\": {\n    \"key\": \"exercise_schedule\",\n    \"value\": \"I exercise on weekends\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1765,
            "completion_tokens": 79,
            "total_tokens": 1844,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:27 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Can you list all the things you
        remember about me?\",\n  \"history\": [],\n  \"available_tools\": [\n    {\n      \"name\":
        \"memory_store\",\n      \"description\": \"Store a key-value pair in memory
        with optional tags\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          },\n          \"value\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter value\"\n          },\n          \"tags\":
        {\n            \"type\": \"array\",\n            \"description\": \"Parameter
        tags (optional)\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8790'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:28 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '831'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '834'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9961'
      X-Ratelimit-Remaining-Tokens:
      - '198036'
      X-Ratelimit-Reset-Requests:
      - 5m30.194s
      X-Ratelimit-Reset-Tokens:
      - 589ms
      X-Request-Id:
      - req_afa4089a6b737286b0f140855e8952a2
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=4VAUfps9CbJt7BumwzI9HeZgQ5MdhpXNJH0LYppU5Rc-1751678008-1.0.1.1-hpvhY1g_S2H4cuRhUmjSixWRhyZIR.XzMzYhhSX.nGbj9SG2HTSr6xAQs7ntBKTByP6BIZQkrpRT79c_uFVIgS1_SJjZ_HIgI0TI19n9ljE;
        path=/; expires=Sat, 05-Jul-25 01:43:28 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=KFXzNaYtt6Dm0eTlB3Fe1dTiy7_9N58hwpqq_t6ID5M-1751678008694-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2fffcb8fb43a6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bpll11U2NJYjlH5cVPdOLGuK1Is2e",
          "object": "chat.completion",
          "created": 1751678007,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"Since there is no history of previous interactions or memories stored, I need to first check if there are any stored memory keys that I can retrieve information from. I will use the 'memory_list' tool to see what memories are available.\",\n  \"action\": \"memory_list\",\n  \"action_input\": {}\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1746,
            "completion_tokens": 76,
            "total_tokens": 1822,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:28 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The original question\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations. Each entry is a hash representing a step
        in the reasoning process.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"question\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"question\":
        \"Can you list all the things you remember about me?\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x00000001168d38f0>\"\n  ],\n  \"observation\":
        \"[\\\"coffee_preference\\\", \\\"exercise_schedule\\\"]\"\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '3494'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:29 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '697'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '701'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9960'
      X-Ratelimit-Remaining-Tokens:
      - '199231'
      X-Ratelimit-Reset-Requests:
      - 5m37.789s
      X-Ratelimit-Reset-Tokens:
      - 230ms
      X-Request-Id:
      - req_3f7844525c6d0b99000c53612269b84d
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=tqpNbId.QRMWCdN48bXT3pvGx6wBZ4MnZSgl4CvlzHc-1751678009-1.0.1.1-S77oTUyd2G8Udw_BEghO2aB0GfrJELIcE1hClk9d46tTjylFZiKwdgtSLzBF_cbHvMCiEKqB6x8zqfTr9aQX..hr.6JuDz5G1DILabr8lI0;
        path=/; expires=Sat, 05-Jul-25 01:43:29 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=nTfvywd04U1a9bDu4MvRQOL1gOawcS_28ymkdqh5p9Q-1751678009608-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a300034f7543a6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bpll2y9kD5USacwLSDZE6aa9WzO7f",
          "object": "chat.completion",
          "created": 1751678008,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The observation indicates that I remember your coffee preference and exercise schedule.\",\n  \"next_step\": \"continue\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 718,
            "completion_tokens": 37,
            "total_tokens": 755,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:29 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Can you list all the things you
        remember about me?\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x00000001168d38f0>\"\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"memory_store\",\n      \"description\": \"Store
        a key-value pair in memory with optional tags\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          },\n          \"tags\": {\n            \"type\": \"array\",\n            \"description\":
        \"Parameter tags (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8844'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:31 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1663'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1666'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9961'
      X-Ratelimit-Remaining-Tokens:
      - '198023'
      X-Ratelimit-Reset-Requests:
      - 5m35.843s
      X-Ratelimit-Reset-Tokens:
      - 592ms
      X-Request-Id:
      - req_e100874ae593620e3c44270ac5b22fb2
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=ZZVKsQEVPyW.1vLrJeFSg1E3F8OQ2Nxgmtp8rEGd1So-1751678011-1.0.1.1-Ph3RQQAK7jhMfElF8ouy0lxVxCxUlN9bL4zdws5eD3X2Uiy31Y9m98AenFCPhzsMUcXo4gRl.6ewrIhUDEKeKXPCkLy1faWl7efPN6SN_qo;
        path=/; expires=Sat, 05-Jul-25 01:43:31 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=NxSwqu4I9VpLJD_NWI5c7GhWhywF0OoazueFNHA0kao-1751678011468-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a30008dcc943a6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bpll3O60XlPTSUYvY8SzGSeEikQHk",
          "object": "chat.completion",
          "created": 1751678009,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"To answer the question about what I remember, I should retrieve the stored memories. Since I need to list all the things I remember, using the 'memory_list' tool will allow me to get all the keys of the memories stored. After that, I can retrieve the values associated with those keys to provide a comprehensive answer.\",\n  \"action\": \"memory_list\",\n  \"action_input\": {}\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1768,
            "completion_tokens": 94,
            "total_tokens": 1862,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:31 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The original question\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations. Each entry is a hash representing a step
        in the reasoning process.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"question\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"question\":
        \"Can you list all the things you remember about me?\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x00000001168d38f0>\",\n    \"#<DSPy::HistoryEntry:0x0000000115babb50>\"\n  ],\n  \"observation\":
        \"[\\\"coffee_preference\\\", \\\"exercise_schedule\\\"]\"\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '3545'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:32 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '627'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '630'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9959'
      X-Ratelimit-Remaining-Tokens:
      - '199218'
      X-Ratelimit-Reset-Requests:
      - 5m51.254s
      X-Ratelimit-Reset-Tokens:
      - 234ms
      X-Request-Id:
      - req_8322d45f0dc2ca7425702c58bcd49e7e
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=i_U1yoGgrjUpS3wNiYsMNFuH3PI43dWjnPdUuIHfFGk-1751678012-1.0.1.1-EUkmIP_AgvuVId2oX_OSK1fTzb5lyvNkWibEcm415s06fG9BR1t3cKDIubUU2JoEXjSQGCXuwiAF40p5cVhw_WE3PKeq_k9Xd4fQsaENLMw;
        path=/; expires=Sat, 05-Jul-25 01:43:32 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=OBTUuuII5sJEegvlI2MoId8JtFNSmHhO7U4PmsIMSTk-1751678012306-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a30014982543a6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bpll5FDHEklTaumVPMST67qDxvl5j",
          "object": "chat.completion",
          "created": 1751678011,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The observation indicates that I remember your coffee preference and exercise schedule.\",\n  \"next_step\": \"continue\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 737,
            "completion_tokens": 37,
            "total_tokens": 774,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:32 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Can you list all the things you
        remember about me?\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x00000001168d38f0>\",\n    \"#<DSPy::HistoryEntry:0x0000000115babb50>\"\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"memory_store\",\n      \"description\": \"Store
        a key-value pair in memory with optional tags\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          },\n          \"tags\": {\n            \"type\": \"array\",\n            \"description\":
        \"Parameter tags (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8895'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:33 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1119'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1122'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9958'
      X-Ratelimit-Remaining-Tokens:
      - '198012'
      X-Ratelimit-Reset-Requests:
      - 6m0.059s
      X-Ratelimit-Reset-Tokens:
      - 596ms
      X-Request-Id:
      - req_aee9285b17f6e76465e28a82740c73c0
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=WJ1EjW_ZwSr6m9ntzi1y1AOFe69e4MnvvTsrPcF6vRk-1751678013-1.0.1.1-M3YrllW2klFqbPYevg27IE.w9QdeQsIPH8PvZsP80soyVO5Ah8X5lhE93YbbEyhcnL35NeOfLaa2Jjb7rBT3kTYPvi6R9fSSjxsgwEoPZv0;
        path=/; expires=Sat, 05-Jul-25 01:43:33 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=KQXcpk4o3gLm2RMu0RfWFgLzPBlaFTXrzDCB_s.jplU-1751678013676-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a3001a3d4843a6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bpll6OgT8nvm3qJgbaflv9F3XdCFf",
          "object": "chat.completion",
          "created": 1751678012,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"To answer the question about what I remember, I should retrieve the stored memories. I can use the 'memory_list' tool to get all the keys of the memories I have stored. Once I have the keys, I can retrieve the values associated with them to provide a comprehensive list of what I remember about the user.\",\n  \"action\": \"memory_list\",\n  \"action_input\": {}\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1787,
            "completion_tokens": 93,
            "total_tokens": 1880,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:33 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The original question\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations. Each entry is a hash representing a step
        in the reasoning process.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"question\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"question\":
        \"Can you list all the things you remember about me?\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x00000001168d38f0>\",\n    \"#<DSPy::HistoryEntry:0x0000000115babb50>\",\n    \"#<DSPy::HistoryEntry:0x0000000115b21630>\"\n  ],\n  \"observation\":
        \"[\\\"coffee_preference\\\", \\\"exercise_schedule\\\"]\"\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '3596'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:34 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '656'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '659'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9957'
      X-Ratelimit-Remaining-Tokens:
      - '199206'
      X-Ratelimit-Reset-Requests:
      - 6m6.35s
      X-Ratelimit-Reset-Tokens:
      - 237ms
      X-Request-Id:
      - req_690ca8e6b5b7d748088cb24410711896
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=N0c1GxbWYwQSEq.J9af9OhiAo3inFWBfoA2YFkhxfEA-1751678014-1.0.1.1-6hJryzrFNkd.hYpheLvjcBMUbWkRDgBhln34NN4A3BuvJj839msAzf1V7ENtKpMO04TlOzLYDh5IIpE_O3L45OKTAz43gI7bs4WLqj4XFbE;
        path=/; expires=Sat, 05-Jul-25 01:43:34 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=CUPaSScN_SWCpuvAXACs.0HWgzmd6u6pfUHFmczF_YA-1751678014504-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a300224d5543a6-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bpll7ElHAStq7vaTrfOSIv8crmQ4U",
          "object": "chat.completion",
          "created": 1751678013,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The observation indicates that I remember your coffee preference and exercise schedule.\",\n  \"next_step\": \"continue\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 756,
            "completion_tokens": 37,
            "total_tokens": 793,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:34 GMT
recorded_with: VCR 6.3.1
