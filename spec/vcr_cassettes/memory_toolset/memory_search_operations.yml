---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Remember that I work at TechCorp
        and my role is Senior Developer.\",\n  \"history\": [],\n  \"available_tools\":
        [\n    {\n      \"name\": \"memory_store\",\n      \"description\": \"Store
        a key-value pair in memory with optional tags\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          },\n          \"tags\": {\n            \"type\": \"array\",\n            \"description\":
        \"Parameter tags (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8805'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:12:55 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '2146'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '2149'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9982'
      X-Ratelimit-Remaining-Tokens:
      - '198032'
      X-Ratelimit-Reset-Requests:
      - 2m27.478s
      X-Ratelimit-Reset-Tokens:
      - 590ms
      X-Request-Id:
      - req_5b7626f778b0769e2b1da1a2fb8399fc
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=KmxeDFgJMhnFo0H95hvh6PwCyeDFtcmcjas.VOvZVCc-1751677975-1.0.1.1-hkxfuAPP7HcExEoe3rRdcbnXeQndRIpeHeXvkW7JPsELv3Z8lGZ8Na0dOXl.Ur5pLAd4NVSNUYYosD0JpFUNGZZpdDi6uViH.48kEoMCkgg;
        path=/; expires=Sat, 05-Jul-25 01:42:55 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=23uYdu7Dv7wHRcSPbwoMcL9USZyjjkug41YymiHCKcI-1751677975668-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ff25de8980e0-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BplkTKHntQ87s29lw2GQZc6NYDqoV",
          "object": "chat.completion",
          "created": 1751677973,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I need to store the information about the user's workplace and role in memory so that it can be retrieved later. The action I will take is to use the 'memory_store' tool to save this information.\",\n  \"action\": \"memory_store\",\n  \"action_input\": {\n    \"key\": \"user_work_info\",\n    \"value\": \"TechCorp, Senior Developer\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1749,
            "completion_tokens": 92,
            "total_tokens": 1841,
            "prompt_tokens_details": {
              "cached_tokens": 1664,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:12:55 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The original question\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations. Each entry is a hash representing a step
        in the reasoning process.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"question\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"question\":
        \"Remember that I work at TechCorp and my role is Senior Developer.\",\n  \"history\":
        [\n    \"#<DSPy::HistoryEntry:0x0000000105fff158>\"\n  ],\n  \"observation\":
        \"Stored memory ''user_work_info'' successfully\"\n}\n```\n\nRespond with
        the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '3498'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:12:56 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '708'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '713'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9982'
      X-Ratelimit-Remaining-Tokens:
      - '199227'
      X-Ratelimit-Reset-Requests:
      - 2m33.688s
      X-Ratelimit-Reset-Tokens:
      - 231ms
      X-Request-Id:
      - req_0ad19144337dc56b09ca4614a3bd6651
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=UpeIc42pJF9jKGMFdrhFty4cz7iY8QLJ2TQvQuaN0pQ-1751677976-1.0.1.1-scKqEGxtSEnz7T07Act4kJRE6GhNdn619YszRkE.iVFk7fD_tv11vTx5afiE6j3P.iJc4ftBZs5mb5U1.TmgFBaxXHk..FMB4ywQkgStimo;
        path=/; expires=Sat, 05-Jul-25 01:42:56 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=Vkpq.F.BmxJWtcmCTLAuEucqag1wy2e3QQvB8IMC9z8-1751677976674-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ff34d80280e0-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BplkWp4L7tRXuORu9itOIqUm6gAP6",
          "object": "chat.completion",
          "created": 1751677976,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The user's work information has been successfully stored in memory.\",\n  \"next_step\": \"finish\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 718,
            "completion_tokens": 35,
            "total_tokens": 753,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:12:56 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Remember that I work at TechCorp
        and my role is Senior Developer.\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x0000000105fff158>\"\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"memory_store\",\n      \"description\": \"Store
        a key-value pair in memory with optional tags\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          },\n          \"tags\": {\n            \"type\": \"array\",\n            \"description\":
        \"Parameter tags (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8859'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:12:57 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1052'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1056'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9981'
      X-Ratelimit-Remaining-Tokens:
      - '198020'
      X-Ratelimit-Reset-Requests:
      - 2m41.362s
      X-Ratelimit-Reset-Tokens:
      - 594ms
      X-Request-Id:
      - req_fea42d2243a2fb8d2b73ee3f1e7a7a97
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=vVHM2e40udD.2.viH.gcXphV6N3.7CBWTYxXVOglCv4-1751677977-1.0.1.1-Lzu3.BUB8TMK2niGJPcZYD.w5yXbq3R_q3r6ojRBNyRkVUZwXzKSXr8dJTkHp0lAJzlBeyq1IG.oS.Vm0Crf0G9pfe62B4zNl966SUMcB_g;
        path=/; expires=Sat, 05-Jul-25 01:42:57 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=l28sFrSA88cs3TXbvUKlc0PZluXI5kHpj2sena5adFE-1751677977970-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ff3b5d1380e0-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BplkWFF8bbHAT9a9ff2GZ3BhjLbni",
          "object": "chat.completion",
          "created": 1751677976,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I need to store the information about the user's workplace and role in memory so that it can be retrieved later if needed. The action I will take is to use the 'memory_store' tool to save this information.\",\n  \"action\": \"memory_store\",\n  \"action_input\": {\n    \"key\": \"user_work_info\",\n    \"value\": \"User works at TechCorp as a Senior Developer\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1769,
            "completion_tokens": 98,
            "total_tokens": 1867,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:12:57 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Search for anything you remember
        about my work or job.\",\n  \"history\": [],\n  \"available_tools\": [\n    {\n      \"name\":
        \"memory_store\",\n      \"description\": \"Store a key-value pair in memory
        with optional tags\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          },\n          \"value\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter value\"\n          },\n          \"tags\":
        {\n            \"type\": \"array\",\n            \"description\": \"Parameter
        tags (optional)\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8794'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:12:59 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '880'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '883'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9980'
      X-Ratelimit-Remaining-Tokens:
      - '198035'
      X-Ratelimit-Reset-Requests:
      - 2m48.633s
      X-Ratelimit-Reset-Tokens:
      - 589ms
      X-Request-Id:
      - req_31570f1a9bb6b318500f7d53b19541ec
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=xobMZYveKzJvLnITApq00tuGeY_Dban517lQlj4LgqE-1751677979-1.0.1.1-HJoa5g4DrHJVOCu_yn5HW5mfNnqA.KIi2SDIOmp.w3lgrxGu8G.EHaz3H8gimg1khMcEDWrgwz5vfKx98HtCp07j7XbiaBv08f.Hh..jLmI;
        path=/; expires=Sat, 05-Jul-25 01:42:59 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=pfmUORWVxr3OZPIdv34f54r.mimYi.iM1Bo7GSOPhLY-1751677979203-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ff431a7980e0-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BplkY3WiA1axDQ3nSzvqX0Cc8oNTr",
          "object": "chat.completion",
          "created": 1751677978,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"Since there is no history to refer to, I should search for any memories related to the user's work or job. The best action to take is to use the 'memory_search' tool to look for relevant information.\",\n  \"action\": \"memory_search\",\n  \"action_input\": {\n    \"pattern\": \"work\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1746,
            "completion_tokens": 81,
            "total_tokens": 1827,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:12:59 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The original question\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations. Each entry is a hash representing a step
        in the reasoning process.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"question\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"question\":
        \"Search for anything you remember about my work or job.\",\n  \"history\":
        [\n    \"#<DSPy::HistoryEntry:0x0000000106d31c40>\"\n  ],\n  \"observation\":
        \"[{:key=>\\\"user_work_info\\\", :value=>\\\"TechCorp, Senior Developer\\\"}]\"\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '3520'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:00 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '697'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '701'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9979'
      X-Ratelimit-Remaining-Tokens:
      - '199225'
      X-Ratelimit-Reset-Requests:
      - 2m56.104s
      X-Ratelimit-Reset-Tokens:
      - 232ms
      X-Request-Id:
      - req_9bfc7edf9466ba2aef8e9d28e8ba1838
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=IsUsluX1xXCURyh1ZsKt856K4bSNDUUeVhhZniuAPjQ-1751677980-1.0.1.1-GV6cMKXSxfDRnUL2jzjdGMETBKnw6_OFFt8RbkszHyisPqyGUJWiww___i3hx.JmK3Tvo.dJEVe_vtOk6hjZDS22zUH4oIvTkqdDndNXS9g;
        path=/; expires=Sat, 05-Jul-25 01:43:00 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=d07dDAz2jX3Psv6ZbQNgGS79b5yVIi68FrkA67yctkc-1751677980159-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ff4ade2d80e0-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BplkZcdQT16urTKHPjWSaDHMmL85r",
          "object": "chat.completion",
          "created": 1751677979,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The observation indicates that the user works at TechCorp as a Senior Developer.\",\n  \"next_step\": \"continue\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 728,
            "completion_tokens": 39,
            "total_tokens": 767,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:12:59 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Search for anything you remember
        about my work or job.\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x0000000106d31c40>\"\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"memory_store\",\n      \"description\": \"Store
        a key-value pair in memory with optional tags\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          },\n          \"tags\": {\n            \"type\": \"array\",\n            \"description\":
        \"Parameter tags (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8848'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:01 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '906'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '909'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9978'
      X-Ratelimit-Remaining-Tokens:
      - '198022'
      X-Ratelimit-Reset-Requests:
      - 3m3.856s
      X-Ratelimit-Reset-Tokens:
      - 593ms
      X-Request-Id:
      - req_45cc7ff8d0f341746c9e6eabcc5d6fc2
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=ymiEqiKgwzI4NYnxS4.ju80ZSnpYA6wbBDEC7o3uHk8-1751677981-1.0.1.1-t1Uc4XeYoggPmv1TAGX0GvYqTN_gfiYOIpBorRA9CD4GecJBwR7V.gY9poY97E722Ps.3mk7zY48TYtfmsBaXcU8qMuCY7sCeUc7a.ty4RQ;
        path=/; expires=Sat, 05-Jul-25 01:43:01 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=6BE_rTDFC2pOq27WymT438EPUQXqd7liQc4GqT_TNks-1751677981259-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ff50ca1b80e0-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BplkaCnvYKoa9leDCW4O84adbTq8Y",
          "object": "chat.completion",
          "created": 1751677980,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"I need to search for any memories related to the user's work or job. Since the question is about retrieving information, using the 'memory_search' tool with a relevant pattern would be the best approach.\",\n  \"action\": \"memory_search\",\n  \"action_input\": {\n    \"pattern\": \"work\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1768,
            "completion_tokens": 78,
            "total_tokens": 1846,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:01 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The original question\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations. Each entry is a hash representing a step
        in the reasoning process.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"question\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"question\":
        \"Search for anything you remember about my work or job.\",\n  \"history\":
        [\n    \"#<DSPy::HistoryEntry:0x0000000106d31c40>\",\n    \"#<DSPy::HistoryEntry:0x000000010539aac0>\"\n  ],\n  \"observation\":
        \"[{:key=>\\\"user_work_info\\\", :value=>\\\"TechCorp, Senior Developer\\\"}]\"\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '3571'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:02 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '697'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '699'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9977'
      X-Ratelimit-Remaining-Tokens:
      - '199212'
      X-Ratelimit-Reset-Requests:
      - 3m11.387s
      X-Ratelimit-Reset-Tokens:
      - 236ms
      X-Request-Id:
      - req_f98dc56c4007205b359632cdd67a7a4e
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=JWqRSYAf2vv.nUmBkKWhyjPFWdpCC0cEmojzkZlQn78-1751677982-1.0.1.1-NalSp8oSY4hCHuZ02GlesNOUqKO9ZfdkdNfe5bldxCWwECp30SLZnmcCMeKChRtBBTbRFXO.7LZKfdkvgZF_8ex7G2GHKYRESASDdHX3EP8;
        path=/; expires=Sat, 05-Jul-25 01:43:02 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=u3RLMygjLvj0g4iuXsxIBcAuleWdAwHS8DOCSUYapYs-1751677982185-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ff57be0c80e0-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BplkbVzuwdaLbLIYfLvKc8aOOLPFt",
          "object": "chat.completion",
          "created": 1751677981,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The observation indicates that the user works at TechCorp as a Senior Developer, which is relevant information about their job.\",\n  \"next_step\": \"continue\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 746,
            "completion_tokens": 47,
            "total_tokens": 793,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:02 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Search for anything you remember
        about my work or job.\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x0000000106d31c40>\",\n    \"#<DSPy::HistoryEntry:0x000000010539aac0>\"\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"memory_store\",\n      \"description\": \"Store
        a key-value pair in memory with optional tags\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          },\n          \"tags\": {\n            \"type\": \"array\",\n            \"description\":
        \"Parameter tags (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8899'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:03 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1408'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1413'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9976'
      X-Ratelimit-Remaining-Tokens:
      - '198011'
      X-Ratelimit-Reset-Requests:
      - 3m19.024s
      X-Ratelimit-Reset-Tokens:
      - 596ms
      X-Request-Id:
      - req_5146b80247e31f2003717d488e1f480c
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=ohXb91VNkgulIjRdisu_zCDNSWkwyUskDKVqfcKN_Bg-1751677983-1.0.1.1-DFn5I0RmjHzOOoakQe_FmlV3KdW72hX7cB_jQ6gHHgF.Hb5Hp8M8CXUAsbVkqVyQNtAJXT.KewRdEbNN_rLXGrXHh5oYlmf0fhKLWQ7UkCs;
        path=/; expires=Sat, 05-Jul-25 01:43:03 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=qlr85xacrypszkd.UPgR9ThCbwUdlzWrqbQlOY8QaLE-1751677983874-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ff5d792180e0-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bplkco7ba5Cpiqh6FTlMVC6t7NMx4",
          "object": "chat.completion",
          "created": 1751677982,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"To answer the question about your work or job, I should search for any relevant memories that might contain information about it. The available tool 'memory_search' can help me find memories by looking for specific patterns related to your work. I will proceed to use this tool to search for memories that might contain information about your job.\",\n  \"action\": \"memory_search\",\n  \"action_input\": {\n    \"pattern\": \"work\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1786,
            "completion_tokens": 103,
            "total_tokens": 1889,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:03 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The original question\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts, actions, and observations. Each entry is a hash representing a step
        in the reasoning process.\"\n    },\n    \"observation\": {\n      \"type\":
        \"string\",\n      \"description\": \"The result from the last action\"\n    }\n  },\n  \"required\":
        [\n    \"question\",\n    \"history\",\n    \"observation\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"interpretation\": {\n      \"type\":
        \"string\",\n      \"description\": \"Interpretation of the observation\"\n    },\n    \"next_step\":
        {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"finish\"\n      ],\n      \"description\":
        \"What to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"\n    }\n  },\n  \"required\":
        [\n    \"interpretation\",\n    \"next_step\"\n  ]\n}\n```\n\nAll interactions
        will be structured in the following way, with the appropriate values filled
        in.\n## Input values\n```json\n{input_values}\n```\n## Output values\nRespond
        exclusively with the output schema fields in the json block below.\n```json\n{output_values}\n```\n\nIn
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next."},{"role":"user","content":"## Input Values\n```json\n{\n  \"question\":
        \"Search for anything you remember about my work or job.\",\n  \"history\":
        [\n    \"#<DSPy::HistoryEntry:0x0000000106d31c40>\",\n    \"#<DSPy::HistoryEntry:0x000000010539aac0>\",\n    \"#<DSPy::HistoryEntry:0x0000000111cde710>\"\n  ],\n  \"observation\":
        \"[{:key=>\\\"user_work_info\\\", :value=>\\\"TechCorp, Senior Developer\\\"}]\"\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '3622'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:05 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1045'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1049'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9976'
      X-Ratelimit-Remaining-Tokens:
      - '199201'
      X-Ratelimit-Reset-Requests:
      - 3m25.869s
      X-Ratelimit-Reset-Tokens:
      - 239ms
      X-Request-Id:
      - req_83fc078cb08c00da38ca9351e2f258ed
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=qRjd0MeJdC6SoIp2Zt330rhSk6_g.1ahbuxcJcMI_3M-1751677985-1.0.1.1-kHwL7uWgpiIZcBjGnFGxTKh3xCI53oFciebBEJa1aIjMNLqp4O6USr4hxaogOO.KOsgLvINbEE..oPWhNxgvZ5s.okfwldqY9TRnHqGjLqA;
        path=/; expires=Sat, 05-Jul-25 01:43:05 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=lLUSmfY8VseAsU0LLJk4fR_0Z62uVvyj.8t3ntkaUl4-1751677985296-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ff69480180e0-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BplkeVqTtGHEcWvmWQy2Q6EGv8kta",
          "object": "chat.completion",
          "created": 1751677984,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The observation indicates that the user works at TechCorp as a Senior Developer, which provides relevant context about their professional background.\",\n  \"next_step\": \"finish\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 765,
            "completion_tokens": 48,
            "total_tokens": 813,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:05 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"Your
        input schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\":
        \"The question to answer\"\n    },\n    \"history\": {\n      \"type\": \"array\",\n      \"items\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"step\":
        {\n            \"type\": \"integer\"\n          },\n          \"thought\":
        {\n            \"type\": \"string\"\n          },\n          \"action\": {\n            \"type\":
        \"string\"\n          },\n          \"action_input\": {\n            \"oneOf\":
        [\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"type\":
        \"number\"\n              },\n              {\n                \"type\": \"object\",\n                \"propertyNames\":
        {\n                  \"type\": \"string\"\n                },\n                \"additionalProperties\":
        {\n                  \"type\": \"string\"\n                },\n                \"description\":
        \"A mapping where keys are strings and values are strings\"\n              },\n              {\n                \"type\":
        \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            ],\n            \"description\":
        \"Union of multiple types\"\n          },\n          \"observation\": {\n            \"type\":
        \"string\"\n          }\n        },\n        \"required\": [\n          \"step\"\n        ],\n        \"description\":
        \"DSPy::HistoryEntry struct\"\n      },\n      \"description\": \"Previous
        thoughts and actions, including observations from tools. The agent MUST use
        information from the history to inform its actions and final answer. Each
        entry is a hash representing a step in the reasoning process.\"\n    },\n    \"available_tools\":
        {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"propertyNames\":
        {\n          \"type\": \"string\"\n        },\n        \"additionalProperties\":
        {\n          \"type\": \"string\"\n        },\n        \"description\": \"A
        mapping where keys are strings and values are strings\"\n      },\n      \"description\":
        \"Array of available tools with their JSON schemas. The agent MUST choose
        an action from the tool names in this list or use \\\"finish\\\". For each
        tool, use the name exactly as specified and provide action_input as a JSON
        object matching the tool''s schema.\"\n    }\n  },\n  \"required\": [\n    \"question\",\n    \"history\",\n    \"available_tools\"\n  ]\n}\n```\nYour
        output schema fields are:\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\":
        \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\":
        \"Reasoning about what to do next, considering the history and observations.\"\n    },\n    \"action\":
        {\n      \"type\": \"string\",\n      \"description\": \"The action to take.
        MUST be one of the tool names listed in `available_tools` input, or the literal
        string \\\"finish\\\" to provide the final answer.\"\n    },\n    \"action_input\":
        {\n      \"oneOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\":
        \"object\",\n          \"propertyNames\": {\n            \"type\": \"string\"\n          },\n          \"additionalProperties\":
        {\n            \"type\": \"string\"\n          },\n          \"description\":
        \"A mapping where keys are strings and values are strings\"\n        }\n      ],\n      \"description\":
        \"Input for the chosen action. If action is a tool name, this MUST be a JSON
        object matching the tool''s schema. If action is \\\"finish\\\", this field
        MUST contain the final answer to the original question. This answer MUST be
        directly taken from the relevant Observation in the history if available.
        For example, if an observation showed \\\"Observation: 100.0\\\", and you
        are finishing, this field MUST be \\\"100.0\\\". Do not leave empty if finishing
        with an observed answer.\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\"\n  ]\n}\n```\n\nAll
        interactions will be structured in the following way, with the appropriate
        values filled in.\n## Input values\n```json\n{input_values}\n```\n## Output
        values\nRespond exclusively with the output schema fields in the json block
        below.\n```json\n{output_values}\n```\n\nIn adhering to this structure, your
        objective is: Generate a thought about what to do next to answer the question."},{"role":"user","content":"##
        Input Values\n```json\n{\n  \"question\": \"Search for anything you remember
        about my work or job.\",\n  \"history\": [\n    \"#<DSPy::HistoryEntry:0x0000000106d31c40>\",\n    \"#<DSPy::HistoryEntry:0x000000010539aac0>\",\n    \"#<DSPy::HistoryEntry:0x0000000111cde710>\"\n  ],\n  \"available_tools\":
        [\n    {\n      \"name\": \"memory_store\",\n      \"description\": \"Store
        a key-value pair in memory with optional tags\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          },\n          \"tags\": {\n            \"type\": \"array\",\n            \"description\":
        \"Parameter tags (optional)\"\n          }\n        },\n        \"required\":
        [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_retrieve\",\n      \"description\": \"Retrieve a value by key from
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_search\",\n      \"description\": \"Search memories by pattern in
        keys and/or values\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"pattern\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter pattern\"\n          },\n          \"in_keys\": {\n            \"type\":
        \"boolean\",\n            \"description\": \"Parameter in_keys (optional)\"\n          },\n          \"in_values\":
        {\n            \"type\": \"boolean\",\n            \"description\": \"Parameter
        in_values (optional)\"\n          }\n        },\n        \"required\": [\n          \"pattern\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_list\",\n      \"description\": \"List all stored memory keys\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_update\",\n      \"description\":
        \"Update an existing memory value\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\":
        \"string\",\n            \"description\": \"Parameter key\"\n          },\n          \"value\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        value\"\n          }\n        },\n        \"required\": [\n          \"key\",\n          \"value\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_delete\",\n      \"description\": \"Delete a memory by key\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\":
        {\n            \"type\": \"string\",\n            \"description\": \"Parameter
        key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    },\n    {\n      \"name\":
        \"memory_clear\",\n      \"description\": \"Clear all stored memories\",\n      \"parameters\":
        {\n        \"type\": \"object\",\n        \"properties\": {},\n        \"required\":
        []\n      }\n    },\n    {\n      \"name\": \"memory_count\",\n      \"description\":
        \"Get the count of stored memories\",\n      \"parameters\": {\n        \"type\":
        \"object\",\n        \"properties\": {},\n        \"required\": []\n      }\n    },\n    {\n      \"name\":
        \"memory_get_metadata\",\n      \"description\": \"Get metadata for a specific
        memory\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\":
        {\n          \"key\": {\n            \"type\": \"string\",\n            \"description\":
        \"Parameter key\"\n          }\n        },\n        \"required\": [\n          \"key\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nRespond
        with the corresponding output schema fields wrapped in a ```json ``` block,\nstarting
        with the heading `## Output values`."}],"temperature":0.0}'
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - application/json
      User-Agent:
      - Ruby
      Host:
      - api.openai.com
      X-Stainless-Arch:
      - arm64
      X-Stainless-Lang:
      - ruby
      X-Stainless-Os:
      - MacOS
      X-Stainless-Package-Version:
      - 0.9.0
      X-Stainless-Runtime:
      - ruby
      X-Stainless-Runtime-Version:
      - 3.3.6
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_API_KEY>
      X-Stainless-Retry-Count:
      - '0'
      X-Stainless-Timeout:
      - '600.0'
      Content-Length:
      - '8950'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 05 Jul 2025 01:13:06 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '895'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '898'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9975'
      X-Ratelimit-Remaining-Tokens:
      - '197998'
      X-Ratelimit-Reset-Requests:
      - 3m33.281s
      X-Ratelimit-Reset-Tokens:
      - 600ms
      X-Request-Id:
      - req_f7ff13af070bf253c9375d149445ff22
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=CcWeQSzVOryEDkIkP1cOhO.RAYsUdKQWVooF0DFRr8E-1751677986-1.0.1.1-ACUWgESbrtWMN_CsYLMhCR0Tybz9Zrefu_Xfx34.FO7gmUVFkgwmzXnx1nKQr5jRULYYeHaefGmRJb9JA2yAxdkbrXnVELSvRJvbOGzEKqk;
        path=/; expires=Sat, 05-Jul-25 01:43:06 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=G1qt5sZWusYOkV3qILklQgdZeCS9PCK4c.gfUQT81rM-1751677986384-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 95a2ff70ebd180e0-EWR
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-Bplkflj1ASzwKd9rIc9ONt9fSfASV",
          "object": "chat.completion",
          "created": 1751677985,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"To answer the question about your work or job, I should search for any relevant memories that might contain information about it. The best action to take is to use the 'memory_search' tool to look for memories related to your work.\",\n  \"action\": \"memory_search\",\n  \"action_input\": {\n    \"pattern\": \"work\"\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1805,
            "completion_tokens": 85,
            "total_tokens": 1890,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 05 Jul 2025 01:13:06 GMT
recorded_with: VCR 6.3.1
