---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"developer","content":"      Your
        input schema fields are:\n        ```json\n         {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"question\":{\"type\":\"string\",\"description\":\"The
        question to answer\"},\"history\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"step\":{\"type\":\"integer\"},\"thought\":{\"type\":\"string\"},\"action\":{\"type\":\"string\"},\"action_input\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"number\"},{\"type\":\"object\",\"propertyNames\":{\"type\":\"string\"},\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A
        mapping where keys are strings and values are strings\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}}],\"description\":\"Union
        of multiple types\"},\"observation\":{\"type\":\"string\"}},\"required\":[\"step\"],\"description\":\"DSPy::HistoryEntry
        struct\"},\"description\":\"Previous thoughts and actions, including observations
        from tools. The agent MUST use information from the history to inform its
        actions and final answer. Each entry is a hash representing a step in the
        reasoning process.\"},\"available_tools\":{\"type\":\"string\",\"description\":\"List
        of available tools and their JSON schemas. The agent MUST choose an action
        from this list or use \\\"finish\\\". For each tool, use the name exactly
        as specified and provide action_input as a JSON object matching the tool''s
        schema.\"}},\"required\":[\"question\",\"history\",\"available_tools\"]}\n        ```\n      Your
        output schema fields are:\n        ```json\n          {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"thought\":{\"type\":\"string\",\"description\":\"Reasoning
        about what to do next, considering the history and observations.\"},\"action\":{\"type\":\"string\",\"description\":\"The
        action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"},\"action_input\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"object\",\"propertyNames\":{\"type\":\"string\"},\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A
        mapping where keys are strings and values are strings\"}],\"description\":\"Input
        for the chosen action. If action is a tool name, this MUST be a JSON object
        matching the tool''s schema. If action is \\\"finish\\\", this field MUST
        contain the final answer to the original question. This answer MUST be directly
        taken from the relevant Observation in the history if available. For example,
        if an observation showed \\\"Observation: 100.0\\\", and you are finishing,
        this field MUST be \\\"100.0\\\". Do not leave empty if finishing with an
        observed answer.\"}},\"required\":[\"thought\",\"action\",\"action_input\"]}\n        ````\n      \n      All
        interactions will be structured in the following way, with the appropriate
        values filled in.\n\n      ## Input values\n        ```json\n         {input_values}\n        ```  \n      ##
        Output values\n      Respond exclusively with the output schema fields in
        the json block below.\n        ```json\n          {output_values}\n        ```\n      \n      In
        adhering to this structure, your objective is: Generate a thought about what
        to do next to answer the question.\n\n"},{"role":"user","content":"        ##
        Input Values\n        ```json\n        {\"question\":\"What is 42 plus 58?\",\"history\":[],\"available_tools\":\"-
        get_todays_date: {\\n  \\\"name\\\": \\\"get_todays_date\\\",\\n  \\\"description\\\":
        \\\"Returns the current date in a human-readable format\\\",\\n  \\\"parameters\\\":
        {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {},\\n    \\\"required\\\":
        []\\n  }\\n}\\n- add_numbers: {\\n  \\\"name\\\": \\\"add_numbers\\\",\\n  \\\"description\\\":
        \\\"Adds two numbers together\\\",\\n  \\\"parameters\\\": {\\n    \\\"type\\\":
        \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"x\\\": {\\n        \\\"type\\\":
        \\\"number\\\",\\n        \\\"description\\\": \\\"Parameter x\\\"\\n      },\\n      \\\"y\\\":
        {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"description\\\": \\\"Parameter
        y\\\"\\n      }\\n    },\\n    \\\"required\\\": [\\n      \\\"x\\\",\\n      \\\"y\\\"\\n    ]\\n  }\\n}\\n-
        calculator: {\\n  \\\"name\\\": \\\"calculator\\\",\\n  \\\"description\\\":
        \\\"Performs basic arithmetic operations\\\",\\n  \\\"parameters\\\": {\\n    \\\"type\\\":
        \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"operation\\\": {\\n        \\\"type\\\":
        \\\"string\\\",\\n        \\\"description\\\": \\\"Parameter operation\\\"\\n      },\\n      \\\"num1\\\":
        {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"description\\\": \\\"Parameter
        num1\\\"\\n      },\\n      \\\"num2\\\": {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"description\\\":
        \\\"Parameter num2\\\"\\n      }\\n    },\\n    \\\"required\\\": [\\n      \\\"operation\\\",\\n      \\\"num1\\\",\\n      \\\"num2\\\"\\n    ]\\n  }\\n}\\n-
        get_random_number: {\\n  \\\"name\\\": \\\"get_random_number\\\",\\n  \\\"description\\\":
        \\\"Generates a random number within a specified range\\\",\\n  \\\"parameters\\\":
        {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"min\\\":
        {\\n        \\\"type\\\": \\\"integer\\\",\\n        \\\"description\\\":
        \\\"Parameter min (optional)\\\"\\n      },\\n      \\\"max\\\": {\\n        \\\"type\\\":
        \\\"integer\\\",\\n        \\\"description\\\": \\\"Parameter max (optional)\\\"\\n      }\\n    },\\n    \\\"required\\\":
        []\\n  }\\n}\"}\n        ```     \n        \n        Respond with the corresponding
        output schema fields wrapped in a ```json ``` block, \n         starting with
        the heading `## Output values`.\n"}],"temperature":0.7,"stream":false}'
    headers:
      User-Agent:
      - Faraday v2.12.2
      Authorization:
      - Bearer <OPENAI_API_KEY>
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 21 Jun 2025 19:30:43 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '3936'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '3939'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9994'
      X-Ratelimit-Remaining-Tokens:
      - '198727'
      X-Ratelimit-Reset-Requests:
      - 50.463s
      X-Ratelimit-Reset-Tokens:
      - 381ms
      X-Request-Id:
      - req_e6d9e0620a165acaea57791ee77228b4
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=I0dsrLf.OLtqNJ.NH3JcbwiTnFhs5Tlxd8_Z62cpN0I-1750534243-1.0.1.1-GZkwtmZw1GDSko1DyzGV8isv3UaQpL69VYDImP81JVXPpxJrdOwyrvrj1sm1mgE8LpdM0BYcnYpfXc4sgAaHhfIwHeTuBseyhBOxGGI7IZI;
        path=/; expires=Sat, 21-Jun-25 20:00:43 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=mUujzuMWBtSPDsK43.0L3Gx1a5X4mUgY00A4gq5OFMo-1750534243862-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9535ebf4d91c56a8-OSL
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BkyD9K1Z4DuMP51eWeHt5q8TcdKQ7",
          "object": "chat.completion",
          "created": 1750534239,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"To answer the question about the sum of 42 and 58, I should use one of the available tools designed for adding numbers. The 'add_numbers' tool is specifically intended for adding two numbers together. I will choose this tool and provide the numbers 42 and 58 as inputs.\",\n  \"action\": \"add_numbers\",\n  \"action_input\": {\n    \"x\": 42,\n    \"y\": 58\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1199,
            "completion_tokens": 104,
            "total_tokens": 1303,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 21 Jun 2025 19:30:44 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"developer","content":"      Your
        input schema fields are:\n        ```json\n         {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"question\":{\"type\":\"string\",\"description\":\"The
        original question\"},\"history\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"step\":{\"type\":\"integer\"},\"thought\":{\"type\":\"string\"},\"action\":{\"type\":\"string\"},\"action_input\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"number\"},{\"type\":\"object\",\"propertyNames\":{\"type\":\"string\"},\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A
        mapping where keys are strings and values are strings\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}}],\"description\":\"Union
        of multiple types\"},\"observation\":{\"type\":\"string\"}},\"required\":[\"step\"],\"description\":\"DSPy::HistoryEntry
        struct\"},\"description\":\"Previous thoughts, actions, and observations.
        Each entry is a hash representing a step in the reasoning process.\"},\"observation\":{\"type\":\"string\",\"description\":\"The
        result from the last action\"}},\"required\":[\"question\",\"history\",\"observation\"]}\n        ```\n      Your
        output schema fields are:\n        ```json\n          {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"interpretation\":{\"type\":\"string\",\"description\":\"Interpretation
        of the observation\"},\"next_step\":{\"type\":\"string\",\"enum\":[\"continue\",\"finish\"],\"description\":\"What
        to do next: ''#<DSPy::NextStep::Continue>'' or ''#<DSPy::NextStep::Finish>''\"}},\"required\":[\"interpretation\",\"next_step\"]}\n        ````\n      \n      All
        interactions will be structured in the following way, with the appropriate
        values filled in.\n\n      ## Input values\n        ```json\n         {input_values}\n        ```  \n      ##
        Output values\n      Respond exclusively with the output schema fields in
        the json block below.\n        ```json\n          {output_values}\n        ```\n      \n      In
        adhering to this structure, your objective is: Process the observation from
        a tool and decide what to do next.\n\n"},{"role":"user","content":"        ##
        Input Values\n        ```json\n        {\"question\":\"What is 42 plus 58?\",\"history\":[\"#<DSPy::HistoryEntry:0x000000011d0cba98>\"],\"observation\":\"100.0\"}\n        ```     \n        \n        Respond
        with the corresponding output schema fields wrapped in a ```json ``` block,
        \n         starting with the heading `## Output values`.\n"}],"temperature":0.7,"stream":false}'
    headers:
      User-Agent:
      - Faraday v2.12.2
      Authorization:
      - Bearer <OPENAI_API_KEY>
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 21 Jun 2025 19:30:47 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '609'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '613'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9993'
      X-Ratelimit-Remaining-Tokens:
      - '199426'
      X-Ratelimit-Reset-Requests:
      - 51.915s
      X-Ratelimit-Reset-Tokens:
      - 172ms
      X-Request-Id:
      - req_39ce263b24b72f10f38a8ad2efc7d681
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=VPPwCPtzESd02ufpI2YMJvySsEoYiDxIKuk3C0M0arM-1750534247-1.0.1.1-DYwF7Qx3cbWBCHdTCDrCWvS1K8VjEnjBu2abzloixacAmkLSmI6DL5X3LboxcYcHggKitctN2xSbCOpwONx3R5Ksa3U.IPpZ60c2FN6ZCXc;
        path=/; expires=Sat, 21-Jun-25 20:00:47 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=TgBOHU7LVBM3VZUi6Do92zSigVth2PIrjwDkCCVRSPI-1750534247709-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9535ec222bc4b4f4-OSL
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BkyDHp5TQGw3MYlB01Rozpfuprjbh",
          "object": "chat.completion",
          "created": 1750534247,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"interpretation\": \"The result of the addition is correct, confirming that 42 plus 58 equals 100.\",\n  \"next_step\": \"finish\"\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 514,
            "completion_tokens": 43,
            "total_tokens": 557,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 21 Jun 2025 19:30:48 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"developer","content":"      Your
        input schema fields are:\n        ```json\n         {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"question\":{\"type\":\"string\",\"description\":\"The
        question to answer\"},\"history\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"step\":{\"type\":\"integer\"},\"thought\":{\"type\":\"string\"},\"action\":{\"type\":\"string\"},\"action_input\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"number\"},{\"type\":\"object\",\"propertyNames\":{\"type\":\"string\"},\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A
        mapping where keys are strings and values are strings\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}}],\"description\":\"Union
        of multiple types\"},\"observation\":{\"type\":\"string\"}},\"required\":[\"step\"],\"description\":\"DSPy::HistoryEntry
        struct\"},\"description\":\"Previous thoughts and actions, including observations
        from tools. The agent MUST use information from the history to inform its
        actions and final answer. Each entry is a hash representing a step in the
        reasoning process.\"},\"available_tools\":{\"type\":\"string\",\"description\":\"List
        of available tools and their JSON schemas. The agent MUST choose an action
        from this list or use \\\"finish\\\". For each tool, use the name exactly
        as specified and provide action_input as a JSON object matching the tool''s
        schema.\"}},\"required\":[\"question\",\"history\",\"available_tools\"]}\n        ```\n      Your
        output schema fields are:\n        ```json\n          {\"$schema\":\"http://json-schema.org/draft-06/schema#\",\"type\":\"object\",\"properties\":{\"thought\":{\"type\":\"string\",\"description\":\"Reasoning
        about what to do next, considering the history and observations.\"},\"action\":{\"type\":\"string\",\"description\":\"The
        action to take. MUST be one of the tool names listed in `available_tools`
        input, or the literal string \\\"finish\\\" to provide the final answer.\"},\"action_input\":{\"oneOf\":[{\"type\":\"string\"},{\"type\":\"object\",\"propertyNames\":{\"type\":\"string\"},\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A
        mapping where keys are strings and values are strings\"}],\"description\":\"Input
        for the chosen action. If action is a tool name, this MUST be a JSON object
        matching the tool''s schema. If action is \\\"finish\\\", this field MUST
        contain the final answer to the original question. This answer MUST be directly
        taken from the relevant Observation in the history if available. For example,
        if an observation showed \\\"Observation: 100.0\\\", and you are finishing,
        this field MUST be \\\"100.0\\\". Do not leave empty if finishing with an
        observed answer.\"}},\"required\":[\"thought\",\"action\",\"action_input\"]}\n        ````\n      \n      All
        interactions will be structured in the following way, with the appropriate
        values filled in.\n\n      ## Input values\n        ```json\n         {input_values}\n        ```  \n      ##
        Output values\n      Respond exclusively with the output schema fields in
        the json block below.\n        ```json\n          {output_values}\n        ```\n      \n      In
        adhering to this structure, your objective is: Generate a thought about what
        to do next to answer the question.\n\n"},{"role":"user","content":"        ##
        Input Values\n        ```json\n        {\"question\":\"What is 42 plus 58?\",\"history\":[\"#<DSPy::HistoryEntry:0x000000011d0cba98>\"],\"available_tools\":\"-
        get_todays_date: {\\n  \\\"name\\\": \\\"get_todays_date\\\",\\n  \\\"description\\\":
        \\\"Returns the current date in a human-readable format\\\",\\n  \\\"parameters\\\":
        {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {},\\n    \\\"required\\\":
        []\\n  }\\n}\\n- add_numbers: {\\n  \\\"name\\\": \\\"add_numbers\\\",\\n  \\\"description\\\":
        \\\"Adds two numbers together\\\",\\n  \\\"parameters\\\": {\\n    \\\"type\\\":
        \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"x\\\": {\\n        \\\"type\\\":
        \\\"number\\\",\\n        \\\"description\\\": \\\"Parameter x\\\"\\n      },\\n      \\\"y\\\":
        {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"description\\\": \\\"Parameter
        y\\\"\\n      }\\n    },\\n    \\\"required\\\": [\\n      \\\"x\\\",\\n      \\\"y\\\"\\n    ]\\n  }\\n}\\n-
        calculator: {\\n  \\\"name\\\": \\\"calculator\\\",\\n  \\\"description\\\":
        \\\"Performs basic arithmetic operations\\\",\\n  \\\"parameters\\\": {\\n    \\\"type\\\":
        \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"operation\\\": {\\n        \\\"type\\\":
        \\\"string\\\",\\n        \\\"description\\\": \\\"Parameter operation\\\"\\n      },\\n      \\\"num1\\\":
        {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"description\\\": \\\"Parameter
        num1\\\"\\n      },\\n      \\\"num2\\\": {\\n        \\\"type\\\": \\\"number\\\",\\n        \\\"description\\\":
        \\\"Parameter num2\\\"\\n      }\\n    },\\n    \\\"required\\\": [\\n      \\\"operation\\\",\\n      \\\"num1\\\",\\n      \\\"num2\\\"\\n    ]\\n  }\\n}\\n-
        get_random_number: {\\n  \\\"name\\\": \\\"get_random_number\\\",\\n  \\\"description\\\":
        \\\"Generates a random number within a specified range\\\",\\n  \\\"parameters\\\":
        {\\n    \\\"type\\\": \\\"object\\\",\\n    \\\"properties\\\": {\\n      \\\"min\\\":
        {\\n        \\\"type\\\": \\\"integer\\\",\\n        \\\"description\\\":
        \\\"Parameter min (optional)\\\"\\n      },\\n      \\\"max\\\": {\\n        \\\"type\\\":
        \\\"integer\\\",\\n        \\\"description\\\": \\\"Parameter max (optional)\\\"\\n      }\\n    },\\n    \\\"required\\\":
        []\\n  }\\n}\"}\n        ```     \n        \n        Respond with the corresponding
        output schema fields wrapped in a ```json ``` block, \n         starting with
        the heading `## Output values`.\n"}],"temperature":0.7,"stream":false}'
    headers:
      User-Agent:
      - Faraday v2.12.2
      Authorization:
      - Bearer <OPENAI_API_KEY>
      Content-Type:
      - application/json
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 21 Jun 2025 19:30:53 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-ftp1nrq85er9xnlu0la8snte
      Openai-Processing-Ms:
      - '1748'
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1750'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9993'
      X-Ratelimit-Remaining-Tokens:
      - '198717'
      X-Ratelimit-Reset-Requests:
      - 56.336s
      X-Ratelimit-Reset-Tokens:
      - 384ms
      X-Request-Id:
      - req_f7aeca3894adfbea1c6fd606a656456c
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=pmKS4biXwzNE6yvXGMwZMXepd52EPVmn_sPdxaYUHo0-1750534253-1.0.1.1-osinKw9J5yP8ui.JT6_EIOmw3XXBhlJH0s9xuYb9lT3.0CYysUHTpet_WUGcP7d4GGsE.jml0PTRmHK778HSLCe8TzU6hGqZ1IU0f5ig1.U;
        path=/; expires=Sat, 21-Jun-25 20:00:53 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=Z.15WSOqISBpPKaWp3bsGeAu_e8aJIg85RpYWjbBg4g-1750534253088-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 9535ec3c68c30b69-OSL
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-BkyDLSqkyllogbJ5JioKQmqi1jv1p",
          "object": "chat.completion",
          "created": 1750534251,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "## Output values\n```json\n{\n  \"thought\": \"To find the answer to the question 'What is 42 plus 58?', I can use one of the available tools that perform addition. The 'add_numbers' tool specifically is designed for this purpose, and it requires two numbers as input.\",\n  \"action\": \"add_numbers\",\n  \"action_input\": {\n    \"x\": 42,\n    \"y\": 58\n  }\n}\n```",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 1219,
            "completion_tokens": 94,
            "total_tokens": 1313,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_34a54ae93c"
        }
  recorded_at: Sat, 21 Jun 2025 19:30:53 GMT
recorded_with: VCR 6.3.1
